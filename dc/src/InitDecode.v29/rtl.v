// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.50 Production Release
//  HLS Date:       Sun Jul  3 15:07:11 PDT 2011
// 
//  Generated by:   wodonnell@soc1
//  Generated date: Tue Dec  3 22:46:24 2013
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    InitDecode_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module InitDecode_core_fsm (
  clk, rst, core_wen, fsm_output, st_for_1_tr0, st_for_1_for_1_tr0, st_for_2_tr0,
      st_for_5_3_tr0, st_main_12_tr0, st_BUTTERFLY_LOOP_6_tr0, st_MAIN_LOOP_3_tr0,
      st_main_13_tr0, st_UPDATE_MATRIX_LOOP_2_tr0
);
  input clk;
  input rst;
  input core_wen;
  output [51:0] fsm_output;
  reg [51:0] fsm_output;
  input st_for_1_tr0;
  input st_for_1_for_1_tr0;
  input st_for_2_tr0;
  input st_for_5_3_tr0;
  input st_main_12_tr0;
  input st_BUTTERFLY_LOOP_6_tr0;
  input st_MAIN_LOOP_3_tr0;
  input st_main_13_tr0;
  input st_UPDATE_MATRIX_LOOP_2_tr0;


  // FSM State Type Declaration for InitDecode_core_fsm_1
  parameter
    st_main = 6'd0,
    st_main_1 = 6'd1,
    st_main_2 = 6'd2,
    st_main_3 = 6'd3,
    st_main_4 = 6'd4,
    st_main_5 = 6'd5,
    st_main_6 = 6'd6,
    st_main_7 = 6'd7,
    st_main_8 = 6'd8,
    st_main_9 = 6'd9,
    st_main_10 = 6'd10,
    st_for = 6'd11,
    st_for_1 = 6'd12,
    st_for_1_for = 6'd13,
    st_for_1_for_1 = 6'd14,
    st_for_2 = 6'd15,
    st_main_11 = 6'd16,
    st_for_5 = 6'd17,
    st_for_5_1 = 6'd18,
    st_for_5_2 = 6'd19,
    st_for_5_3 = 6'd20,
    st_main_12 = 6'd21,
    st_MAIN_LOOP = 6'd22,
    st_MAIN_LOOP_1 = 6'd23,
    st_MAIN_LOOP_2 = 6'd24,
    st_BUTTERFLY_LOOP = 6'd25,
    st_BUTTERFLY_LOOP_1 = 6'd26,
    st_BUTTERFLY_LOOP_2 = 6'd27,
    st_BUTTERFLY_LOOP_3 = 6'd28,
    st_BUTTERFLY_LOOP_4 = 6'd29,
    st_BUTTERFLY_LOOP_5 = 6'd30,
    st_BUTTERFLY_LOOP_6 = 6'd31,
    st_MAIN_LOOP_3 = 6'd32,
    st_main_13 = 6'd33,
    st_UPDATE_MATRIX_LOOP = 6'd34,
    st_UPDATE_MATRIX_LOOP_1 = 6'd35,
    st_UPDATE_MATRIX_LOOP_2 = 6'd36,
    st_main_14 = 6'd37,
    st_main_15 = 6'd38,
    st_main_16 = 6'd39,
    st_main_17 = 6'd40,
    st_main_18 = 6'd41,
    st_main_19 = 6'd42,
    st_main_20 = 6'd43,
    st_main_21 = 6'd44,
    st_main_22 = 6'd45,
    st_main_23 = 6'd46,
    st_main_24 = 6'd47,
    st_main_25 = 6'd48,
    st_main_26 = 6'd49,
    st_main_27 = 6'd50,
    st_main_28 = 6'd51,
    state_x = 6'b000000;

  reg [5:0] state_var;
  reg [5:0] state_var_NS;

  always @(st_for_1_tr0 or st_for_1_for_1_tr0 or st_for_2_tr0 or st_for_5_3_tr0 or
      st_main_12_tr0 or st_BUTTERFLY_LOOP_6_tr0 or st_MAIN_LOOP_3_tr0 or st_main_13_tr0
      or st_UPDATE_MATRIX_LOOP_2_tr0 or state_var)
  begin : InitDecode_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 52'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 52'b10;
        state_var_NS = st_main_2;
      end
      st_main_2 : begin
        fsm_output = 52'b100;
        state_var_NS = st_main_3;
      end
      st_main_3 : begin
        fsm_output = 52'b1000;
        state_var_NS = st_main_4;
      end
      st_main_4 : begin
        fsm_output = 52'b10000;
        state_var_NS = st_main_5;
      end
      st_main_5 : begin
        fsm_output = 52'b100000;
        state_var_NS = st_main_6;
      end
      st_main_6 : begin
        fsm_output = 52'b1000000;
        state_var_NS = st_main_7;
      end
      st_main_7 : begin
        fsm_output = 52'b10000000;
        state_var_NS = st_main_8;
      end
      st_main_8 : begin
        fsm_output = 52'b100000000;
        state_var_NS = st_main_9;
      end
      st_main_9 : begin
        fsm_output = 52'b1000000000;
        state_var_NS = st_main_10;
      end
      st_main_10 : begin
        fsm_output = 52'b10000000000;
        state_var_NS = st_for;
      end
      st_for : begin
        fsm_output = 52'b100000000000;
        state_var_NS = st_for_1;
      end
      st_for_1 : begin
        fsm_output = 52'b1000000000000;
        if ( st_for_1_tr0 ) begin
          state_var_NS = st_for_2;
        end
        else begin
          state_var_NS = st_for_1_for;
        end
      end
      st_for_1_for : begin
        fsm_output = 52'b10000000000000;
        state_var_NS = st_for_1_for_1;
      end
      st_for_1_for_1 : begin
        fsm_output = 52'b100000000000000;
        if ( st_for_1_for_1_tr0 ) begin
          state_var_NS = st_for_2;
        end
        else begin
          state_var_NS = st_for_1_for;
        end
      end
      st_for_2 : begin
        fsm_output = 52'b1000000000000000;
        if ( st_for_2_tr0 ) begin
          state_var_NS = st_main_11;
        end
        else begin
          state_var_NS = st_for;
        end
      end
      st_main_11 : begin
        fsm_output = 52'b10000000000000000;
        state_var_NS = st_for_5;
      end
      st_for_5 : begin
        fsm_output = 52'b100000000000000000;
        state_var_NS = st_for_5_1;
      end
      st_for_5_1 : begin
        fsm_output = 52'b1000000000000000000;
        state_var_NS = st_for_5_2;
      end
      st_for_5_2 : begin
        fsm_output = 52'b10000000000000000000;
        state_var_NS = st_for_5_3;
      end
      st_for_5_3 : begin
        fsm_output = 52'b100000000000000000000;
        if ( st_for_5_3_tr0 ) begin
          state_var_NS = st_main_12;
        end
        else begin
          state_var_NS = st_for_5;
        end
      end
      st_main_12 : begin
        fsm_output = 52'b1000000000000000000000;
        if ( st_main_12_tr0 ) begin
          state_var_NS = st_main_13;
        end
        else begin
          state_var_NS = st_MAIN_LOOP;
        end
      end
      st_MAIN_LOOP : begin
        fsm_output = 52'b10000000000000000000000;
        state_var_NS = st_MAIN_LOOP_1;
      end
      st_MAIN_LOOP_1 : begin
        fsm_output = 52'b100000000000000000000000;
        state_var_NS = st_MAIN_LOOP_2;
      end
      st_MAIN_LOOP_2 : begin
        fsm_output = 52'b1000000000000000000000000;
        state_var_NS = st_BUTTERFLY_LOOP;
      end
      st_BUTTERFLY_LOOP : begin
        fsm_output = 52'b10000000000000000000000000;
        state_var_NS = st_BUTTERFLY_LOOP_1;
      end
      st_BUTTERFLY_LOOP_1 : begin
        fsm_output = 52'b100000000000000000000000000;
        state_var_NS = st_BUTTERFLY_LOOP_2;
      end
      st_BUTTERFLY_LOOP_2 : begin
        fsm_output = 52'b1000000000000000000000000000;
        state_var_NS = st_BUTTERFLY_LOOP_3;
      end
      st_BUTTERFLY_LOOP_3 : begin
        fsm_output = 52'b10000000000000000000000000000;
        state_var_NS = st_BUTTERFLY_LOOP_4;
      end
      st_BUTTERFLY_LOOP_4 : begin
        fsm_output = 52'b100000000000000000000000000000;
        state_var_NS = st_BUTTERFLY_LOOP_5;
      end
      st_BUTTERFLY_LOOP_5 : begin
        fsm_output = 52'b1000000000000000000000000000000;
        state_var_NS = st_BUTTERFLY_LOOP_6;
      end
      st_BUTTERFLY_LOOP_6 : begin
        fsm_output = 52'b10000000000000000000000000000000;
        if ( st_BUTTERFLY_LOOP_6_tr0 ) begin
          state_var_NS = st_MAIN_LOOP_3;
        end
        else begin
          state_var_NS = st_BUTTERFLY_LOOP;
        end
      end
      st_MAIN_LOOP_3 : begin
        fsm_output = 52'b100000000000000000000000000000000;
        if ( st_MAIN_LOOP_3_tr0 ) begin
          state_var_NS = st_main_13;
        end
        else begin
          state_var_NS = st_MAIN_LOOP;
        end
      end
      st_main_13 : begin
        fsm_output = 52'b1000000000000000000000000000000000;
        if ( st_main_13_tr0 ) begin
          state_var_NS = st_main_14;
        end
        else begin
          state_var_NS = st_UPDATE_MATRIX_LOOP;
        end
      end
      st_UPDATE_MATRIX_LOOP : begin
        fsm_output = 52'b10000000000000000000000000000000000;
        state_var_NS = st_UPDATE_MATRIX_LOOP_1;
      end
      st_UPDATE_MATRIX_LOOP_1 : begin
        fsm_output = 52'b100000000000000000000000000000000000;
        state_var_NS = st_UPDATE_MATRIX_LOOP_2;
      end
      st_UPDATE_MATRIX_LOOP_2 : begin
        fsm_output = 52'b1000000000000000000000000000000000000;
        if ( st_UPDATE_MATRIX_LOOP_2_tr0 ) begin
          state_var_NS = st_main_14;
        end
        else begin
          state_var_NS = st_UPDATE_MATRIX_LOOP;
        end
      end
      st_main_14 : begin
        fsm_output = 52'b10000000000000000000000000000000000000;
        state_var_NS = st_main_15;
      end
      st_main_15 : begin
        fsm_output = 52'b100000000000000000000000000000000000000;
        state_var_NS = st_main_16;
      end
      st_main_16 : begin
        fsm_output = 52'b1000000000000000000000000000000000000000;
        state_var_NS = st_main_17;
      end
      st_main_17 : begin
        fsm_output = 52'b10000000000000000000000000000000000000000;
        state_var_NS = st_main_18;
      end
      st_main_18 : begin
        fsm_output = 52'b100000000000000000000000000000000000000000;
        state_var_NS = st_main_19;
      end
      st_main_19 : begin
        fsm_output = 52'b1000000000000000000000000000000000000000000;
        state_var_NS = st_main_20;
      end
      st_main_20 : begin
        fsm_output = 52'b10000000000000000000000000000000000000000000;
        state_var_NS = st_main_21;
      end
      st_main_21 : begin
        fsm_output = 52'b100000000000000000000000000000000000000000000;
        state_var_NS = st_main_22;
      end
      st_main_22 : begin
        fsm_output = 52'b1000000000000000000000000000000000000000000000;
        state_var_NS = st_main_23;
      end
      st_main_23 : begin
        fsm_output = 52'b10000000000000000000000000000000000000000000000;
        state_var_NS = st_main_24;
      end
      st_main_24 : begin
        fsm_output = 52'b100000000000000000000000000000000000000000000000;
        state_var_NS = st_main_25;
      end
      st_main_25 : begin
        fsm_output = 52'b1000000000000000000000000000000000000000000000000;
        state_var_NS = st_main_26;
      end
      st_main_26 : begin
        fsm_output = 52'b10000000000000000000000000000000000000000000000000;
        state_var_NS = st_main_27;
      end
      st_main_27 : begin
        fsm_output = 52'b100000000000000000000000000000000000000000000000000;
        state_var_NS = st_main_28;
      end
      st_main_28 : begin
        fsm_output = 52'b1000000000000000000000000000000000000000000000000000;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 52'b0000000000000000000000000000000000000000000000000000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else if ( core_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InitDecode_core_wait_ctrl
// ------------------------------------------------------------------


module InitDecode_core_wait_ctrl (
  clk, rst, core_wen, vecNewDistance_rTow0_rsc_dualport_re_core_sct, vecNewDistance_rTow1_rsc_dualport_re_core_sct,
      vecOutputBits_rsc_dualport_we_core_sct, mgc_start_sync_mgc_bsync_rv_rd_core_sct,
      mgc_start_sync_mgc_bsync_rv_vd, mgc_done_sync_mgc_bsync_rdy_rd_core_sct, InitDecode_return_triosy_mgc_io_sync_ld_core_sct,
      vecOutputBits_triosy_mgc_io_sync_ld_core_sct, vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct,
      vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct, iLevel_triosy_mgc_io_sync_ld_core_sct,
      iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct, iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct,
      iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct, iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct,
      iN2_triosy_mgc_io_sync_ld_core_sct, iN1_triosy_mgc_io_sync_ld_core_sct, eNewChannelType_triosy_mgc_io_sync_ld_core_sct,
      eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct, vecNewDistance_rTow0_rsc_dualport_oswt_1,
      vecNewDistance_rTow0_rsc_dualport_bcwt_1, vecNewDistance_rTow0_rsc_dualport_oswt_2,
      vecNewDistance_rTow0_rsc_dualport_bcwt_2, vecNewDistance_rTow0_rsc_dualport_re_core_psct,
      vecNewDistance_rTow1_rsc_dualport_bcwt_1, vecNewDistance_rTow1_rsc_dualport_bcwt_2,
      vecNewDistance_rTow1_rsc_dualport_re_core_psct, vecOutputBits_rsc_dualport_oswt,
      vecOutputBits_rsc_dualport_we_core_psct, mgc_start_sync_mgc_bsync_rv_rd_core_psct,
      mgc_done_sync_mgc_bsync_rdy_rd_core_psct, vecOutputBits_triosy_mgc_io_sync_ld_core_psct,
      vecNewDistance_rTow0_rsc_dualport_oswt_2_pff, vecNewDistance_rTow0_rsc_dualport_oswt_1_pff,
      vecOutputBits_rsc_dualport_oswt_pff
);
  input clk;
  input rst;
  output core_wen;
  output [1:0] vecNewDistance_rTow0_rsc_dualport_re_core_sct;
  output [1:0] vecNewDistance_rTow1_rsc_dualport_re_core_sct;
  output [1:0] vecOutputBits_rsc_dualport_we_core_sct;
  output mgc_start_sync_mgc_bsync_rv_rd_core_sct;
  input mgc_start_sync_mgc_bsync_rv_vd;
  output mgc_done_sync_mgc_bsync_rdy_rd_core_sct;
  output InitDecode_return_triosy_mgc_io_sync_ld_core_sct;
  output vecOutputBits_triosy_mgc_io_sync_ld_core_sct;
  output vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct;
  output vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct;
  output iLevel_triosy_mgc_io_sync_ld_core_sct;
  output iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct;
  output iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct;
  output iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct;
  output iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct;
  output iN2_triosy_mgc_io_sync_ld_core_sct;
  output iN1_triosy_mgc_io_sync_ld_core_sct;
  output eNewChannelType_triosy_mgc_io_sync_ld_core_sct;
  output eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct;
  input vecNewDistance_rTow0_rsc_dualport_oswt_1;
  output vecNewDistance_rTow0_rsc_dualport_bcwt_1;
  reg vecNewDistance_rTow0_rsc_dualport_bcwt_1;
  input vecNewDistance_rTow0_rsc_dualport_oswt_2;
  output vecNewDistance_rTow0_rsc_dualport_bcwt_2;
  reg vecNewDistance_rTow0_rsc_dualport_bcwt_2;
  input [1:0] vecNewDistance_rTow0_rsc_dualport_re_core_psct;
  output vecNewDistance_rTow1_rsc_dualport_bcwt_1;
  reg vecNewDistance_rTow1_rsc_dualport_bcwt_1;
  output vecNewDistance_rTow1_rsc_dualport_bcwt_2;
  reg vecNewDistance_rTow1_rsc_dualport_bcwt_2;
  input [1:0] vecNewDistance_rTow1_rsc_dualport_re_core_psct;
  input vecOutputBits_rsc_dualport_oswt;
  input [1:0] vecOutputBits_rsc_dualport_we_core_psct;
  input mgc_start_sync_mgc_bsync_rv_rd_core_psct;
  input mgc_done_sync_mgc_bsync_rdy_rd_core_psct;
  input vecOutputBits_triosy_mgc_io_sync_ld_core_psct;
  input vecNewDistance_rTow0_rsc_dualport_oswt_2_pff;
  input vecNewDistance_rTow0_rsc_dualport_oswt_1_pff;
  input vecOutputBits_rsc_dualport_oswt_pff;


  // Interconnect Declarations
  wire vecNewDistance_rTow0_rsc_dualport_tiswt0_1;
  wire vecNewDistance_rTow0_rsc_dualport_biwt_1;
  reg vecNewDistance_rTow0_rsc_dualport_icwt_1;
  wire vecNewDistance_rTow0_rsc_dualport_tiswt0_2;
  wire vecNewDistance_rTow0_rsc_dualport_biwt_2;
  reg vecNewDistance_rTow0_rsc_dualport_icwt_2;
  reg core_wten;
  wire vecNewDistance_rTow1_rsc_dualport_biwt_1;
  reg vecNewDistance_rTow1_rsc_dualport_icwt_1;
  wire vecNewDistance_rTow1_rsc_dualport_biwt_2;
  reg vecNewDistance_rTow1_rsc_dualport_icwt_2;
  wire vecOutputBits_rsc_dualport_tiswt0;
  wire vecOutputBits_rsc_dualport_biwt;
  reg vecOutputBits_rsc_dualport_icwt;
  reg vecOutputBits_rsc_dualport_bcwt;
  wire mgc_start_sync_mgc_bsync_rv_ogwt;
  wire mgc_start_sync_mgc_bsync_rv_pdswt0;
  wire mgc_start_sync_mgc_bsync_rv_biwt;
  reg mgc_start_sync_mgc_bsync_rv_icwt;
  reg mgc_start_sync_mgc_bsync_rv_bcwt;
  wire mgc_done_sync_mgc_bsync_rdy_ogwt;
  wire mgc_done_sync_mgc_bsync_rdy_pdswt0;
  reg mgc_done_sync_mgc_bsync_rdy_icwt;
  reg mgc_done_sync_mgc_bsync_rdy_bcwt;
  wire InitDecode_return_triosy_mgc_io_sync_ogwt;
  reg InitDecode_return_triosy_mgc_io_sync_icwt;
  reg InitDecode_return_triosy_mgc_io_sync_bcwt;
  wire vecOutputBits_triosy_mgc_io_sync_ogwt;
  wire vecOutputBits_triosy_mgc_io_sync_pdswt0;
  reg vecOutputBits_triosy_mgc_io_sync_icwt;
  reg vecOutputBits_triosy_mgc_io_sync_bcwt;
  wire vecNewDistance_rTow1_triosy_mgc_io_sync_ogwt;
  reg vecNewDistance_rTow1_triosy_mgc_io_sync_icwt;
  reg vecNewDistance_rTow1_triosy_mgc_io_sync_bcwt;
  wire vecNewDistance_rTow0_triosy_mgc_io_sync_ogwt;
  reg vecNewDistance_rTow0_triosy_mgc_io_sync_icwt;
  reg vecNewDistance_rTow0_triosy_mgc_io_sync_bcwt;
  wire iLevel_triosy_mgc_io_sync_ogwt;
  reg iLevel_triosy_mgc_io_sync_icwt;
  reg iLevel_triosy_mgc_io_sync_bcwt;
  wire iPunctPatPartB_triosy_mgc_io_sync_ogwt;
  reg iPunctPatPartB_triosy_mgc_io_sync_icwt;
  reg iPunctPatPartB_triosy_mgc_io_sync_bcwt;
  wire iPunctPatPartA_triosy_mgc_io_sync_ogwt;
  reg iPunctPatPartA_triosy_mgc_io_sync_icwt;
  reg iPunctPatPartA_triosy_mgc_io_sync_bcwt;
  wire iNewNumOutBitsPartB_triosy_mgc_io_sync_ogwt;
  reg iNewNumOutBitsPartB_triosy_mgc_io_sync_icwt;
  reg iNewNumOutBitsPartB_triosy_mgc_io_sync_bcwt;
  wire iNewNumOutBitsPartA_triosy_mgc_io_sync_ogwt;
  reg iNewNumOutBitsPartA_triosy_mgc_io_sync_icwt;
  reg iNewNumOutBitsPartA_triosy_mgc_io_sync_bcwt;
  wire iN2_triosy_mgc_io_sync_ogwt;
  reg iN2_triosy_mgc_io_sync_icwt;
  reg iN2_triosy_mgc_io_sync_bcwt;
  wire iN1_triosy_mgc_io_sync_ogwt;
  reg iN1_triosy_mgc_io_sync_icwt;
  reg iN1_triosy_mgc_io_sync_bcwt;
  wire eNewChannelType_triosy_mgc_io_sync_ogwt;
  reg eNewChannelType_triosy_mgc_io_sync_icwt;
  reg eNewChannelType_triosy_mgc_io_sync_bcwt;
  wire eNewCodingScheme_triosy_mgc_io_sync_ogwt;
  reg eNewCodingScheme_triosy_mgc_io_sync_icwt;
  reg eNewCodingScheme_triosy_mgc_io_sync_bcwt;
  wire and_4_cse;
  wire and_6_cse;
  wire and_40_cse;
  wire and_48_cse;
  wire vecNewDistance_rTow0_rsc_dualport_tiswt0_2_pff;
  wire vecNewDistance_rTow0_rsc_dualport_tiswt0_1_pff;

  assign vecNewDistance_rTow0_rsc_dualport_tiswt0_1 = (~ core_wten) & vecNewDistance_rTow0_rsc_dualport_oswt_1;
  assign vecNewDistance_rTow0_rsc_dualport_biwt_1 = vecNewDistance_rTow0_rsc_dualport_tiswt0_1
      | vecNewDistance_rTow0_rsc_dualport_icwt_1;
  assign and_4_cse = vecNewDistance_rTow0_rsc_dualport_oswt_1 & core_wen;
  assign vecNewDistance_rTow0_rsc_dualport_tiswt0_2 = (~ core_wten) & vecNewDistance_rTow0_rsc_dualport_oswt_2;
  assign vecNewDistance_rTow0_rsc_dualport_biwt_2 = vecNewDistance_rTow0_rsc_dualport_tiswt0_2
      | vecNewDistance_rTow0_rsc_dualport_icwt_2;
  assign and_6_cse = vecNewDistance_rTow0_rsc_dualport_oswt_2 & core_wen;
  assign vecNewDistance_rTow1_rsc_dualport_biwt_1 = vecNewDistance_rTow0_rsc_dualport_tiswt0_1
      | vecNewDistance_rTow1_rsc_dualport_icwt_1;
  assign vecNewDistance_rTow1_rsc_dualport_biwt_2 = vecNewDistance_rTow0_rsc_dualport_tiswt0_2
      | vecNewDistance_rTow1_rsc_dualport_icwt_2;
  assign vecOutputBits_rsc_dualport_tiswt0 = (~ core_wten) & vecOutputBits_rsc_dualport_oswt;
  assign vecOutputBits_rsc_dualport_biwt = vecOutputBits_rsc_dualport_tiswt0 | vecOutputBits_rsc_dualport_icwt;
  assign mgc_start_sync_mgc_bsync_rv_pdswt0 = (~ core_wten) & mgc_start_sync_mgc_bsync_rv_rd_core_psct;
  assign mgc_start_sync_mgc_bsync_rv_biwt = mgc_start_sync_mgc_bsync_rv_ogwt & mgc_start_sync_mgc_bsync_rv_vd;
  assign mgc_start_sync_mgc_bsync_rv_ogwt = mgc_start_sync_mgc_bsync_rv_pdswt0 |
      mgc_start_sync_mgc_bsync_rv_icwt;
  assign mgc_start_sync_mgc_bsync_rv_rd_core_sct = mgc_start_sync_mgc_bsync_rv_rd_core_psct
      & mgc_start_sync_mgc_bsync_rv_ogwt;
  assign mgc_done_sync_mgc_bsync_rdy_pdswt0 = (~ core_wten) & mgc_done_sync_mgc_bsync_rdy_rd_core_psct;
  assign mgc_done_sync_mgc_bsync_rdy_ogwt = mgc_done_sync_mgc_bsync_rdy_pdswt0 |
      mgc_done_sync_mgc_bsync_rdy_icwt;
  assign and_40_cse = mgc_done_sync_mgc_bsync_rdy_rd_core_psct & core_wen;
  assign mgc_done_sync_mgc_bsync_rdy_rd_core_sct = mgc_done_sync_mgc_bsync_rdy_rd_core_psct
      & mgc_done_sync_mgc_bsync_rdy_ogwt;
  assign InitDecode_return_triosy_mgc_io_sync_ogwt = mgc_done_sync_mgc_bsync_rdy_pdswt0
      | InitDecode_return_triosy_mgc_io_sync_icwt;
  assign InitDecode_return_triosy_mgc_io_sync_ld_core_sct = mgc_done_sync_mgc_bsync_rdy_rd_core_psct
      & InitDecode_return_triosy_mgc_io_sync_ogwt;
  assign vecOutputBits_triosy_mgc_io_sync_pdswt0 = (~ core_wten) & vecOutputBits_triosy_mgc_io_sync_ld_core_psct;
  assign vecOutputBits_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | vecOutputBits_triosy_mgc_io_sync_icwt;
  assign and_48_cse = vecOutputBits_triosy_mgc_io_sync_ld_core_psct & core_wen;
  assign vecOutputBits_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & vecOutputBits_triosy_mgc_io_sync_ogwt;
  assign vecNewDistance_rTow1_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | vecNewDistance_rTow1_triosy_mgc_io_sync_icwt;
  assign vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & vecNewDistance_rTow1_triosy_mgc_io_sync_ogwt;
  assign vecNewDistance_rTow0_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | vecNewDistance_rTow0_triosy_mgc_io_sync_icwt;
  assign vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & vecNewDistance_rTow0_triosy_mgc_io_sync_ogwt;
  assign iLevel_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | iLevel_triosy_mgc_io_sync_icwt;
  assign iLevel_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & iLevel_triosy_mgc_io_sync_ogwt;
  assign iPunctPatPartB_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | iPunctPatPartB_triosy_mgc_io_sync_icwt;
  assign iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & iPunctPatPartB_triosy_mgc_io_sync_ogwt;
  assign iPunctPatPartA_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | iPunctPatPartA_triosy_mgc_io_sync_icwt;
  assign iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & iPunctPatPartA_triosy_mgc_io_sync_ogwt;
  assign iNewNumOutBitsPartB_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | iNewNumOutBitsPartB_triosy_mgc_io_sync_icwt;
  assign iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & iNewNumOutBitsPartB_triosy_mgc_io_sync_ogwt;
  assign iNewNumOutBitsPartA_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | iNewNumOutBitsPartA_triosy_mgc_io_sync_icwt;
  assign iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & iNewNumOutBitsPartA_triosy_mgc_io_sync_ogwt;
  assign iN2_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0 |
      iN2_triosy_mgc_io_sync_icwt;
  assign iN2_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & iN2_triosy_mgc_io_sync_ogwt;
  assign iN1_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0 |
      iN1_triosy_mgc_io_sync_icwt;
  assign iN1_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & iN1_triosy_mgc_io_sync_ogwt;
  assign eNewChannelType_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | eNewChannelType_triosy_mgc_io_sync_icwt;
  assign eNewChannelType_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & eNewChannelType_triosy_mgc_io_sync_ogwt;
  assign eNewCodingScheme_triosy_mgc_io_sync_ogwt = vecOutputBits_triosy_mgc_io_sync_pdswt0
      | eNewCodingScheme_triosy_mgc_io_sync_icwt;
  assign eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct = vecOutputBits_triosy_mgc_io_sync_ld_core_psct
      & eNewCodingScheme_triosy_mgc_io_sync_ogwt;
  assign core_wen = ((~ vecNewDistance_rTow0_rsc_dualport_oswt_1) | vecNewDistance_rTow0_rsc_dualport_biwt_1
      | vecNewDistance_rTow0_rsc_dualport_bcwt_1) & ((~ vecNewDistance_rTow0_rsc_dualport_oswt_2)
      | vecNewDistance_rTow0_rsc_dualport_biwt_2 | vecNewDistance_rTow0_rsc_dualport_bcwt_2)
      & ((~ vecNewDistance_rTow0_rsc_dualport_oswt_1) | vecNewDistance_rTow1_rsc_dualport_biwt_1
      | vecNewDistance_rTow1_rsc_dualport_bcwt_1) & ((~ vecNewDistance_rTow0_rsc_dualport_oswt_2)
      | vecNewDistance_rTow1_rsc_dualport_biwt_2 | vecNewDistance_rTow1_rsc_dualport_bcwt_2)
      & ((~ vecOutputBits_rsc_dualport_oswt) | vecOutputBits_rsc_dualport_biwt |
      vecOutputBits_rsc_dualport_bcwt) & ((~ mgc_start_sync_mgc_bsync_rv_rd_core_psct)
      | mgc_start_sync_mgc_bsync_rv_biwt | mgc_start_sync_mgc_bsync_rv_bcwt) & ((~
      mgc_done_sync_mgc_bsync_rdy_rd_core_psct) | mgc_done_sync_mgc_bsync_rdy_ogwt
      | mgc_done_sync_mgc_bsync_rdy_bcwt) & ((~ mgc_done_sync_mgc_bsync_rdy_rd_core_psct)
      | InitDecode_return_triosy_mgc_io_sync_ogwt | InitDecode_return_triosy_mgc_io_sync_bcwt)
      & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct) | vecOutputBits_triosy_mgc_io_sync_ogwt
      | vecOutputBits_triosy_mgc_io_sync_bcwt) & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct)
      | vecNewDistance_rTow1_triosy_mgc_io_sync_ogwt | vecNewDistance_rTow1_triosy_mgc_io_sync_bcwt)
      & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct) | vecNewDistance_rTow0_triosy_mgc_io_sync_ogwt
      | vecNewDistance_rTow0_triosy_mgc_io_sync_bcwt) & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct)
      | iLevel_triosy_mgc_io_sync_ogwt | iLevel_triosy_mgc_io_sync_bcwt) & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct)
      | iPunctPatPartB_triosy_mgc_io_sync_ogwt | iPunctPatPartB_triosy_mgc_io_sync_bcwt)
      & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct) | iPunctPatPartA_triosy_mgc_io_sync_ogwt
      | iPunctPatPartA_triosy_mgc_io_sync_bcwt) & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct)
      | iNewNumOutBitsPartB_triosy_mgc_io_sync_ogwt | iNewNumOutBitsPartB_triosy_mgc_io_sync_bcwt)
      & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct) | iNewNumOutBitsPartA_triosy_mgc_io_sync_ogwt
      | iNewNumOutBitsPartA_triosy_mgc_io_sync_bcwt) & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct)
      | iN2_triosy_mgc_io_sync_ogwt | iN2_triosy_mgc_io_sync_bcwt) & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct)
      | iN1_triosy_mgc_io_sync_ogwt | iN1_triosy_mgc_io_sync_bcwt) & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct)
      | eNewChannelType_triosy_mgc_io_sync_ogwt | eNewChannelType_triosy_mgc_io_sync_bcwt)
      & ((~ vecOutputBits_triosy_mgc_io_sync_ld_core_psct) | eNewCodingScheme_triosy_mgc_io_sync_ogwt
      | eNewCodingScheme_triosy_mgc_io_sync_bcwt);
  assign vecNewDistance_rTow0_rsc_dualport_re_core_sct = vecNewDistance_rTow0_rsc_dualport_re_core_psct
      & ({vecNewDistance_rTow0_rsc_dualport_tiswt0_2_pff , vecNewDistance_rTow0_rsc_dualport_tiswt0_1_pff});
  assign vecNewDistance_rTow0_rsc_dualport_tiswt0_2_pff = core_wen & vecNewDistance_rTow0_rsc_dualport_oswt_2_pff;
  assign vecNewDistance_rTow0_rsc_dualport_tiswt0_1_pff = core_wen & vecNewDistance_rTow0_rsc_dualport_oswt_1_pff;
  assign vecNewDistance_rTow1_rsc_dualport_re_core_sct = vecNewDistance_rTow1_rsc_dualport_re_core_psct
      & ({vecNewDistance_rTow0_rsc_dualport_tiswt0_2_pff , vecNewDistance_rTow0_rsc_dualport_tiswt0_1_pff});
  assign vecOutputBits_rsc_dualport_we_core_sct = {1'b0 , ((vecOutputBits_rsc_dualport_we_core_psct[0])
      & core_wen & vecOutputBits_rsc_dualport_oswt_pff)};
  always @(posedge clk) begin
    if ( rst ) begin
      vecNewDistance_rTow0_rsc_dualport_icwt_1 <= 1'b0;
      vecNewDistance_rTow0_rsc_dualport_bcwt_1 <= 1'b0;
      vecNewDistance_rTow0_rsc_dualport_icwt_2 <= 1'b0;
      vecNewDistance_rTow0_rsc_dualport_bcwt_2 <= 1'b0;
      vecNewDistance_rTow1_rsc_dualport_icwt_1 <= 1'b0;
      vecNewDistance_rTow1_rsc_dualport_bcwt_1 <= 1'b0;
      vecNewDistance_rTow1_rsc_dualport_icwt_2 <= 1'b0;
      vecNewDistance_rTow1_rsc_dualport_bcwt_2 <= 1'b0;
      vecOutputBits_rsc_dualport_icwt <= 1'b0;
      vecOutputBits_rsc_dualport_bcwt <= 1'b0;
      mgc_start_sync_mgc_bsync_rv_icwt <= 1'b0;
      mgc_start_sync_mgc_bsync_rv_bcwt <= 1'b0;
      mgc_done_sync_mgc_bsync_rdy_icwt <= 1'b0;
      mgc_done_sync_mgc_bsync_rdy_bcwt <= 1'b0;
      InitDecode_return_triosy_mgc_io_sync_icwt <= 1'b0;
      InitDecode_return_triosy_mgc_io_sync_bcwt <= 1'b0;
      vecOutputBits_triosy_mgc_io_sync_icwt <= 1'b0;
      vecOutputBits_triosy_mgc_io_sync_bcwt <= 1'b0;
      vecNewDistance_rTow1_triosy_mgc_io_sync_icwt <= 1'b0;
      vecNewDistance_rTow1_triosy_mgc_io_sync_bcwt <= 1'b0;
      vecNewDistance_rTow0_triosy_mgc_io_sync_icwt <= 1'b0;
      vecNewDistance_rTow0_triosy_mgc_io_sync_bcwt <= 1'b0;
      iLevel_triosy_mgc_io_sync_icwt <= 1'b0;
      iLevel_triosy_mgc_io_sync_bcwt <= 1'b0;
      iPunctPatPartB_triosy_mgc_io_sync_icwt <= 1'b0;
      iPunctPatPartB_triosy_mgc_io_sync_bcwt <= 1'b0;
      iPunctPatPartA_triosy_mgc_io_sync_icwt <= 1'b0;
      iPunctPatPartA_triosy_mgc_io_sync_bcwt <= 1'b0;
      iNewNumOutBitsPartB_triosy_mgc_io_sync_icwt <= 1'b0;
      iNewNumOutBitsPartB_triosy_mgc_io_sync_bcwt <= 1'b0;
      iNewNumOutBitsPartA_triosy_mgc_io_sync_icwt <= 1'b0;
      iNewNumOutBitsPartA_triosy_mgc_io_sync_bcwt <= 1'b0;
      iN2_triosy_mgc_io_sync_icwt <= 1'b0;
      iN2_triosy_mgc_io_sync_bcwt <= 1'b0;
      iN1_triosy_mgc_io_sync_icwt <= 1'b0;
      iN1_triosy_mgc_io_sync_bcwt <= 1'b0;
      eNewChannelType_triosy_mgc_io_sync_icwt <= 1'b0;
      eNewChannelType_triosy_mgc_io_sync_bcwt <= 1'b0;
      eNewCodingScheme_triosy_mgc_io_sync_icwt <= 1'b0;
      eNewCodingScheme_triosy_mgc_io_sync_bcwt <= 1'b0;
      core_wten <= 1'b0;
    end
    else begin
      vecNewDistance_rTow0_rsc_dualport_icwt_1 <= vecNewDistance_rTow0_rsc_dualport_icwt_1
          ^ vecNewDistance_rTow0_rsc_dualport_tiswt0_1 ^ vecNewDistance_rTow0_rsc_dualport_biwt_1;
      vecNewDistance_rTow0_rsc_dualport_bcwt_1 <= vecNewDistance_rTow0_rsc_dualport_bcwt_1
          ^ vecNewDistance_rTow0_rsc_dualport_biwt_1 ^ and_4_cse;
      vecNewDistance_rTow0_rsc_dualport_icwt_2 <= vecNewDistance_rTow0_rsc_dualport_icwt_2
          ^ vecNewDistance_rTow0_rsc_dualport_tiswt0_2 ^ vecNewDistance_rTow0_rsc_dualport_biwt_2;
      vecNewDistance_rTow0_rsc_dualport_bcwt_2 <= vecNewDistance_rTow0_rsc_dualport_bcwt_2
          ^ vecNewDistance_rTow0_rsc_dualport_biwt_2 ^ and_6_cse;
      vecNewDistance_rTow1_rsc_dualport_icwt_1 <= vecNewDistance_rTow1_rsc_dualport_icwt_1
          ^ vecNewDistance_rTow0_rsc_dualport_tiswt0_1 ^ vecNewDistance_rTow1_rsc_dualport_biwt_1;
      vecNewDistance_rTow1_rsc_dualport_bcwt_1 <= vecNewDistance_rTow1_rsc_dualport_bcwt_1
          ^ vecNewDistance_rTow1_rsc_dualport_biwt_1 ^ and_4_cse;
      vecNewDistance_rTow1_rsc_dualport_icwt_2 <= vecNewDistance_rTow1_rsc_dualport_icwt_2
          ^ vecNewDistance_rTow0_rsc_dualport_tiswt0_2 ^ vecNewDistance_rTow1_rsc_dualport_biwt_2;
      vecNewDistance_rTow1_rsc_dualport_bcwt_2 <= vecNewDistance_rTow1_rsc_dualport_bcwt_2
          ^ vecNewDistance_rTow1_rsc_dualport_biwt_2 ^ and_6_cse;
      vecOutputBits_rsc_dualport_icwt <= vecOutputBits_rsc_dualport_icwt ^ vecOutputBits_rsc_dualport_tiswt0
          ^ vecOutputBits_rsc_dualport_biwt;
      vecOutputBits_rsc_dualport_bcwt <= vecOutputBits_rsc_dualport_bcwt ^ vecOutputBits_rsc_dualport_biwt
          ^ (vecOutputBits_rsc_dualport_oswt & core_wen);
      mgc_start_sync_mgc_bsync_rv_icwt <= mgc_start_sync_mgc_bsync_rv_icwt ^ mgc_start_sync_mgc_bsync_rv_pdswt0
          ^ mgc_start_sync_mgc_bsync_rv_biwt;
      mgc_start_sync_mgc_bsync_rv_bcwt <= mgc_start_sync_mgc_bsync_rv_bcwt ^ mgc_start_sync_mgc_bsync_rv_biwt
          ^ (mgc_start_sync_mgc_bsync_rv_rd_core_psct & core_wen);
      mgc_done_sync_mgc_bsync_rdy_icwt <= mgc_done_sync_mgc_bsync_rdy_icwt ^ mgc_done_sync_mgc_bsync_rdy_pdswt0
          ^ mgc_done_sync_mgc_bsync_rdy_ogwt;
      mgc_done_sync_mgc_bsync_rdy_bcwt <= mgc_done_sync_mgc_bsync_rdy_bcwt ^ mgc_done_sync_mgc_bsync_rdy_ogwt
          ^ and_40_cse;
      InitDecode_return_triosy_mgc_io_sync_icwt <= InitDecode_return_triosy_mgc_io_sync_icwt
          ^ mgc_done_sync_mgc_bsync_rdy_pdswt0 ^ InitDecode_return_triosy_mgc_io_sync_ogwt;
      InitDecode_return_triosy_mgc_io_sync_bcwt <= InitDecode_return_triosy_mgc_io_sync_bcwt
          ^ InitDecode_return_triosy_mgc_io_sync_ogwt ^ and_40_cse;
      vecOutputBits_triosy_mgc_io_sync_icwt <= vecOutputBits_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ vecOutputBits_triosy_mgc_io_sync_ogwt;
      vecOutputBits_triosy_mgc_io_sync_bcwt <= vecOutputBits_triosy_mgc_io_sync_bcwt
          ^ vecOutputBits_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      vecNewDistance_rTow1_triosy_mgc_io_sync_icwt <= vecNewDistance_rTow1_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ vecNewDistance_rTow1_triosy_mgc_io_sync_ogwt;
      vecNewDistance_rTow1_triosy_mgc_io_sync_bcwt <= vecNewDistance_rTow1_triosy_mgc_io_sync_bcwt
          ^ vecNewDistance_rTow1_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      vecNewDistance_rTow0_triosy_mgc_io_sync_icwt <= vecNewDistance_rTow0_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ vecNewDistance_rTow0_triosy_mgc_io_sync_ogwt;
      vecNewDistance_rTow0_triosy_mgc_io_sync_bcwt <= vecNewDistance_rTow0_triosy_mgc_io_sync_bcwt
          ^ vecNewDistance_rTow0_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      iLevel_triosy_mgc_io_sync_icwt <= iLevel_triosy_mgc_io_sync_icwt ^ vecOutputBits_triosy_mgc_io_sync_pdswt0
          ^ iLevel_triosy_mgc_io_sync_ogwt;
      iLevel_triosy_mgc_io_sync_bcwt <= iLevel_triosy_mgc_io_sync_bcwt ^ iLevel_triosy_mgc_io_sync_ogwt
          ^ and_48_cse;
      iPunctPatPartB_triosy_mgc_io_sync_icwt <= iPunctPatPartB_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ iPunctPatPartB_triosy_mgc_io_sync_ogwt;
      iPunctPatPartB_triosy_mgc_io_sync_bcwt <= iPunctPatPartB_triosy_mgc_io_sync_bcwt
          ^ iPunctPatPartB_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      iPunctPatPartA_triosy_mgc_io_sync_icwt <= iPunctPatPartA_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ iPunctPatPartA_triosy_mgc_io_sync_ogwt;
      iPunctPatPartA_triosy_mgc_io_sync_bcwt <= iPunctPatPartA_triosy_mgc_io_sync_bcwt
          ^ iPunctPatPartA_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      iNewNumOutBitsPartB_triosy_mgc_io_sync_icwt <= iNewNumOutBitsPartB_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ iNewNumOutBitsPartB_triosy_mgc_io_sync_ogwt;
      iNewNumOutBitsPartB_triosy_mgc_io_sync_bcwt <= iNewNumOutBitsPartB_triosy_mgc_io_sync_bcwt
          ^ iNewNumOutBitsPartB_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      iNewNumOutBitsPartA_triosy_mgc_io_sync_icwt <= iNewNumOutBitsPartA_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ iNewNumOutBitsPartA_triosy_mgc_io_sync_ogwt;
      iNewNumOutBitsPartA_triosy_mgc_io_sync_bcwt <= iNewNumOutBitsPartA_triosy_mgc_io_sync_bcwt
          ^ iNewNumOutBitsPartA_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      iN2_triosy_mgc_io_sync_icwt <= iN2_triosy_mgc_io_sync_icwt ^ vecOutputBits_triosy_mgc_io_sync_pdswt0
          ^ iN2_triosy_mgc_io_sync_ogwt;
      iN2_triosy_mgc_io_sync_bcwt <= iN2_triosy_mgc_io_sync_bcwt ^ iN2_triosy_mgc_io_sync_ogwt
          ^ and_48_cse;
      iN1_triosy_mgc_io_sync_icwt <= iN1_triosy_mgc_io_sync_icwt ^ vecOutputBits_triosy_mgc_io_sync_pdswt0
          ^ iN1_triosy_mgc_io_sync_ogwt;
      iN1_triosy_mgc_io_sync_bcwt <= iN1_triosy_mgc_io_sync_bcwt ^ iN1_triosy_mgc_io_sync_ogwt
          ^ and_48_cse;
      eNewChannelType_triosy_mgc_io_sync_icwt <= eNewChannelType_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ eNewChannelType_triosy_mgc_io_sync_ogwt;
      eNewChannelType_triosy_mgc_io_sync_bcwt <= eNewChannelType_triosy_mgc_io_sync_bcwt
          ^ eNewChannelType_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      eNewCodingScheme_triosy_mgc_io_sync_icwt <= eNewCodingScheme_triosy_mgc_io_sync_icwt
          ^ vecOutputBits_triosy_mgc_io_sync_pdswt0 ^ eNewCodingScheme_triosy_mgc_io_sync_ogwt;
      eNewCodingScheme_triosy_mgc_io_sync_bcwt <= eNewCodingScheme_triosy_mgc_io_sync_bcwt
          ^ eNewCodingScheme_triosy_mgc_io_sync_ogwt ^ and_48_cse;
      core_wten <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InitDecode_core
// ------------------------------------------------------------------


module InitDecode_core (
  clk, rst, vecNewDistance_rTow0_rsc_dualport_data_out, vecNewDistance_rTow1_rsc_dualport_data_out,
      core_wen, vecNewDistance_rTow0_rsc_dualport_addr_core, vecNewDistance_rTow0_rsc_dualport_re_core_sct,
      vecNewDistance_rTow1_rsc_dualport_addr_core, vecNewDistance_rTow1_rsc_dualport_re_core_sct,
      vecOutputBits_rsc_dualport_data_in_core, vecOutputBits_rsc_dualport_addr_core,
      vecOutputBits_rsc_dualport_we_core_sct, eNewCodingScheme_rsc_mgc_in_wire_d,
      eNewChannelType_rsc_mgc_in_wire_d, iN1_rsc_mgc_in_wire_d, iN2_rsc_mgc_in_wire_d,
      iNewNumOutBitsPartA_rsc_mgc_in_wire_d, iNewNumOutBitsPartB_rsc_mgc_in_wire_d,
      iPunctPatPartA_rsc_mgc_in_wire_d, iPunctPatPartB_rsc_mgc_in_wire_d, iLevel_rsc_mgc_in_wire_d,
      InitDecode_return_rsc_mgc_out_stdreg_d, vecTrelMetric1_rsc_dualport_data_in,
      vecTrelMetric1_rsc_dualport_addr, vecTrelMetric1_rsc_dualport_re, vecTrelMetric1_rsc_dualport_we,
      vecTrelMetric1_rsc_dualport_data_out, vecTrelMetric2_rsc_dualport_data_in,
      vecTrelMetric2_rsc_dualport_addr, vecTrelMetric2_rsc_dualport_re, vecTrelMetric2_rsc_dualport_we,
      vecTrelMetric2_rsc_dualport_data_out, veciTablePuncPat_rsc_dualport_data_in,
      veciTablePuncPat_rsc_dualport_addr, veciTablePuncPat_rsc_dualport_re, veciTablePuncPat_rsc_dualport_we,
      veciTablePuncPat_rsc_dualport_data_out, matdecDecisions_rsc_dualport_data_in,
      matdecDecisions_rsc_dualport_addr, matdecDecisions_rsc_dualport_re, matdecDecisions_rsc_dualport_we,
      matdecDecisions_rsc_dualport_data_out, mgc_start_sync_mgc_bsync_rv_rd_core_sct,
      mgc_start_sync_mgc_bsync_rv_vd, mgc_done_sync_mgc_bsync_rdy_rd_core_sct, InitDecode_return_triosy_mgc_io_sync_ld_core_sct,
      vecOutputBits_triosy_mgc_io_sync_ld_core_sct, vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct,
      vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct, iLevel_triosy_mgc_io_sync_ld_core_sct,
      iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct, iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct,
      iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct, iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct,
      iN2_triosy_mgc_io_sync_ld_core_sct, iN1_triosy_mgc_io_sync_ld_core_sct, eNewChannelType_triosy_mgc_io_sync_ld_core_sct,
      eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct, div_mgc_div_a, div_mgc_div_b,
      div_mgc_div_z_oreg, div_mgc_div_1_a, div_mgc_div_1_b, div_mgc_div_1_z_oreg
);
  input clk;
  input rst;
  input [15:0] vecNewDistance_rTow0_rsc_dualport_data_out;
  input [15:0] vecNewDistance_rTow1_rsc_dualport_data_out;
  output core_wen;
  output [25:0] vecNewDistance_rTow0_rsc_dualport_addr_core;
  output [1:0] vecNewDistance_rTow0_rsc_dualport_re_core_sct;
  output [25:0] vecNewDistance_rTow1_rsc_dualport_addr_core;
  output [1:0] vecNewDistance_rTow1_rsc_dualport_re_core_sct;
  output [15:0] vecOutputBits_rsc_dualport_data_in_core;
  output [25:0] vecOutputBits_rsc_dualport_addr_core;
  output [1:0] vecOutputBits_rsc_dualport_we_core_sct;
  input [31:0] eNewCodingScheme_rsc_mgc_in_wire_d;
  input [31:0] eNewChannelType_rsc_mgc_in_wire_d;
  input [31:0] iN1_rsc_mgc_in_wire_d;
  input [31:0] iN2_rsc_mgc_in_wire_d;
  input [31:0] iNewNumOutBitsPartA_rsc_mgc_in_wire_d;
  input [31:0] iNewNumOutBitsPartB_rsc_mgc_in_wire_d;
  input [31:0] iPunctPatPartA_rsc_mgc_in_wire_d;
  input [31:0] iPunctPatPartB_rsc_mgc_in_wire_d;
  input [31:0] iLevel_rsc_mgc_in_wire_d;
  output [31:0] InitDecode_return_rsc_mgc_out_stdreg_d;
  reg [31:0] InitDecode_return_rsc_mgc_out_stdreg_d;
  output [63:0] vecTrelMetric1_rsc_dualport_data_in;
  output [11:0] vecTrelMetric1_rsc_dualport_addr;
  output [1:0] vecTrelMetric1_rsc_dualport_re;
  output [1:0] vecTrelMetric1_rsc_dualport_we;
  input [63:0] vecTrelMetric1_rsc_dualport_data_out;
  output [63:0] vecTrelMetric2_rsc_dualport_data_in;
  output [11:0] vecTrelMetric2_rsc_dualport_addr;
  output [1:0] vecTrelMetric2_rsc_dualport_re;
  output [1:0] vecTrelMetric2_rsc_dualport_we;
  input [63:0] vecTrelMetric2_rsc_dualport_data_out;
  output [63:0] veciTablePuncPat_rsc_dualport_data_in;
  output [25:0] veciTablePuncPat_rsc_dualport_addr;
  output [1:0] veciTablePuncPat_rsc_dualport_re;
  output [1:0] veciTablePuncPat_rsc_dualport_we;
  input [63:0] veciTablePuncPat_rsc_dualport_data_out;
  output [1:0] matdecDecisions_rsc_dualport_data_in;
  output [37:0] matdecDecisions_rsc_dualport_addr;
  output [1:0] matdecDecisions_rsc_dualport_re;
  output [1:0] matdecDecisions_rsc_dualport_we;
  input [1:0] matdecDecisions_rsc_dualport_data_out;
  output mgc_start_sync_mgc_bsync_rv_rd_core_sct;
  input mgc_start_sync_mgc_bsync_rv_vd;
  output mgc_done_sync_mgc_bsync_rdy_rd_core_sct;
  output InitDecode_return_triosy_mgc_io_sync_ld_core_sct;
  output vecOutputBits_triosy_mgc_io_sync_ld_core_sct;
  output vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct;
  output vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct;
  output iLevel_triosy_mgc_io_sync_ld_core_sct;
  output iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct;
  output iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct;
  output iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct;
  output iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct;
  output iN2_triosy_mgc_io_sync_ld_core_sct;
  output iN1_triosy_mgc_io_sync_ld_core_sct;
  output eNewChannelType_triosy_mgc_io_sync_ld_core_sct;
  output eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct;
  output [31:0] div_mgc_div_a;
  reg [31:0] div_mgc_div_a;
  output [31:0] div_mgc_div_b;
  reg [31:0] div_mgc_div_b;
  input [31:0] div_mgc_div_z_oreg;
  output [31:0] div_mgc_div_1_a;
  reg [31:0] div_mgc_div_1_a;
  output [3:0] div_mgc_div_1_b;
  reg [3:0] div_mgc_div_1_b;
  input [31:0] div_mgc_div_1_z_oreg;


  // Interconnect Declarations
  wire vecNewDistance_rTow0_rsc_dualport_bcwt_1;
  wire vecNewDistance_rTow0_rsc_dualport_bcwt_2;
  wire vecNewDistance_rTow1_rsc_dualport_bcwt_1;
  wire vecNewDistance_rTow1_rsc_dualport_bcwt_2;
  wire [51:0] fsm_output;
  wire switch_lp_nor_1_tmp;
  wire switch_lp_nor_tmp;
  wire or_dcpl_284;
  wire or_dcpl_286;
  wire or_dcpl_298;
  wire or_dcpl_305;
  wire or_dcpl_308;
  wire or_dcpl_311;
  wire or_dcpl_317;
  wire or_dcpl_323;
  wire or_dcpl_336;
  wire or_dcpl_339;
  wire mux_tmp;
  wire mux_tmp_1;
  wire or_dcpl_667;
  wire or_dcpl_736;
  wire or_dcpl_807;
  wire or_dcpl_816;
  wire or_dcpl_823;
  wire and_dcpl_444;
  wire or_dcpl_882;
  wire or_dcpl_883;
  wire or_dcpl_885;
  wire or_dcpl_886;
  wire or_dcpl_887;
  wire or_dcpl_890;
  wire or_dcpl_898;
  wire or_dcpl_906;
  wire or_dcpl_915;
  wire or_dcpl_947;
  wire or_dcpl_979;
  wire or_dcpl_1010;
  wire or_dcpl_1011;
  wire or_dcpl_1014;
  wire or_dcpl_1015;
  wire or_dcpl_1018;
  wire or_dcpl_1026;
  wire or_dcpl_1034;
  wire or_dcpl_1043;
  wire or_dcpl_1075;
  wire or_dcpl_1107;
  wire or_dcpl_1162;
  wire or_dcpl_1166;
  wire or_dcpl_1169;
  wire and_tmp_4;
  wire or_dcpl_1175;
  wire or_dcpl_1178;
  wire or_dcpl_1186;
  wire or_dcpl_1195;
  wire or_dcpl_1200;
  wire or_dcpl_1205;
  wire or_dcpl_1208;
  wire or_dcpl_1217;
  wire or_dcpl_1220;
  wire and_tmp_5;
  wire and_dcpl_547;
  wire and_dcpl_548;
  wire or_dcpl_1268;
  wire or_dcpl_1272;
  wire or_dcpl_1275;
  wire and_dcpl_553;
  wire or_dcpl_1283;
  wire or_dcpl_1290;
  wire or_dcpl_1291;
  wire and_dcpl_557;
  wire or_dcpl_1317;
  wire and_dcpl_558;
  wire or_dcpl_1342;
  wire or_dcpl_1345;
  wire or_dcpl_1347;
  wire or_dcpl_1351;
  wire or_dcpl_1353;
  wire or_dcpl_1355;
  wire or_dcpl_1356;
  wire or_dcpl_1357;
  wire or_dcpl_1358;
  wire or_dcpl_1359;
  wire or_dcpl_1363;
  wire or_dcpl_1364;
  wire or_dcpl_1365;
  wire or_dcpl_1368;
  wire or_dcpl_1371;
  wire or_dcpl_1375;
  wire or_dcpl_1378;
  wire and_dcpl_572;
  wire and_dcpl_575;
  wire or_dcpl_1535;
  wire or_dcpl_1609;
  wire or_dcpl_1619;
  wire or_dcpl_1666;
  wire or_dcpl_1776;
  wire or_dcpl_1792;
  wire and_dcpl_669;
  reg [31:0] eNewChannelType_1_sva;
  reg [31:0] iNewNumOutBitsPartA_1_sva;
  reg [6:0] iPunctPatPartA_2_sva;
  reg [6:0] iPunctPatPartB_2_sva;
  reg [31:0] iNumOutBits_sva;
  reg [30:0] acc_3_psp_sva;
  reg [31:0] i_1_sva;
  reg exit_for_sva;
  reg [31:0] i_2_sva;
  reg exit_for_1_sva;
  reg exit_for_6_sva;
  reg iTailbitParamL1_1_lpi_dfm;
  reg [31:0] io_read_iLevel_rsc_d_svs;
  reg [3:0] if_slc_iPuncturingPatterns_psp_sva;
  reg [5:0] iTailbitPattern_2_sva;
  reg [3:0] else_slc_iPuncturingPatterns_psp_sva;
  reg [5:0] iTailbitPattern_2_sva_1;
  reg [3:0] slc_iPuncturingPatterns_psp_sva;
  reg [3:0] slc_iPuncturingPatterns_1_psp_sva;
  reg [4:0] i_9_sva;
  reg exit_for_2_sva;
  reg [4:0] i_10_sva;
  reg exit_for_3_sva;
  reg exit_for_7_sva;
  reg exit_for_8_sva;
  reg [2:0] i_11_sva;
  reg exit_for_4_sva;
  reg exit_for_sva_1;
  reg exit_for_1_sva_1;
  reg [6:0] j_1_sva_1;
  reg [3:0] veciPuncPatPartA_0_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_1_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_2_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_3_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_4_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_5_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_6_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_7_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_8_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_9_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_10_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_11_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_12_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_13_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_14_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartA_15_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_0_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_1_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_2_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_3_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_4_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_5_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_6_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_7_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_8_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_9_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_10_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_11_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_12_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_13_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_14_1_sva_dfm_3;
  reg [3:0] veciPuncPatPartB_15_1_sva_dfm_3;
  reg [1:0] veciTailBitPat_0_1_sva_dfm;
  reg [1:0] veciTailBitPat_1_1_sva_dfm;
  reg [1:0] veciTailBitPat_2_1_sva_dfm;
  reg [1:0] veciTailBitPat_3_1_sva_dfm;
  reg [1:0] veciTailBitPat_4_1_sva_dfm;
  reg [1:0] veciTailBitPat_5_1_sva_dfm;
  reg [31:0] iPunctCounter_sva;
  reg [31:0] i_6_sva;
  reg exit_for_5_sva;
  reg pCurTrelMetric_2_sva;
  reg pOldTrelMetric_2_sva;
  reg exit_INIT_TRELLIS_LOOP_sva;
  reg exit_for_5_sva_1;
  reg for_5_slc_1_svs;
  reg for_5_else_lor_lpi_1_dfm;
  reg [31:0] iPunctCounter_sva_dfm_1;
  reg [31:0] iPunctCounter_sva_dfm_3;
  reg exit_for_5_sva_dfm;
  reg exit_INIT_TRELLIS_LOOP_sva_dfm;
  reg [31:0] iDistCnt_sva;
  reg [31:0] i_8_sva;
  reg [31:0] iDistCnt_sva_1;
  reg [31:0] MAIN_LOOP_slc_veciTablePuncPat_cse_sva;
  reg [7:0] MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva;
  reg [7:0] MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva;
  reg unequal_tmp_1;
  reg [31:0] iDistCnt_sva_2;
  reg [8:0] MAIN_LOOP_else_rIRxx00_acc_2_psp_sva;
  reg [8:0] MAIN_LOOP_else_rIRxx10_acc_2_psp_sva;
  reg [8:0] MAIN_LOOP_else_rIRxx01_acc_2_psp_sva;
  reg [8:0] MAIN_LOOP_else_rIRxx11_acc_2_psp_sva;
  reg equal_tmp_1;
  reg nor_tmp_4;
  reg [31:0] iDistCnt_sva_3;
  reg unequal_tmp_2;
  reg [31:0] iDistCnt_sva_4;
  reg nor_dfs_1;
  reg [9:0] vecrMetricSet_0_1_lpi_1_dfm_2;
  reg [9:0] vecrMetricSet_2_1_lpi_1_dfm_2;
  reg [9:0] vecrMetricSet_4_1_lpi_1_dfm_2;
  reg [9:0] vecrMetricSet_6_1_lpi_1_dfm_2;
  reg [9:0] vecrMetricSet_9_1_lpi_1_dfm_2;
  reg [9:0] vecrMetricSet_11_1_lpi_1_dfm_2;
  reg [9:0] vecrMetricSet_13_1_lpi_1_dfm_2;
  reg [9:0] vecrMetricSet_15_1_lpi_1_dfm_2;
  reg [31:0] BUTTERFLY_LOOP_rFiStAccMetricPrev0_slc_vecrMetricSet_1_cse_sva;
  reg [31:0] BUTTERFLY_LOOP_rFiStAccMetricPrev0_sva;
  wire [32:0] xBUTTERFLY_LOOP_rFiStAccMetricPrev0_sva;
  reg [31:0] BUTTERFLY_LOOP_rFiStAccMetricPrev1_slc_vecrMetricSet_1_cse_sva;
  reg [31:0] BUTTERFLY_LOOP_rSecStAccMetricPrev1_sva;
  reg [5:0] MAIN_LOOP_cnt_1_sva_1;
  reg iCurDecState_sg2_sva;
  reg iCurDecState_sg3_sva;
  reg iCurDecState_sg1_sva;
  reg iCurDecState_sg4_sva;
  reg iCurDecState_1_sva;
  reg iCurDecState_sg5_1_sva;
  reg [31:0] i_sva;
  reg exit_UPDATE_MATRIX_LOOP_sva;
  reg or_psp;
  reg [31:0] retValue_mux_mut;
  reg [31:0] if_conc_2_mut;
  reg [31:0] else_conc_2_mut;
  reg for_and_6_itm;
  reg for_and_7_itm;
  reg for_nor_1_itm;
  reg for_and_9_itm;
  reg for_and_10_itm;
  reg for_and_11_itm;
  reg [31:0] for_mux_itm;
  reg for_and_49_itm;
  reg for_mux_79_itm;
  reg for_mux_80_itm;
  reg for_5_else_oelse_and_itm;
  reg [31:0] for_5_if_and_1_itm;
  reg [3:0] for_5_if_mux_itm;
  reg [3:0] for_5_else_if_mux_itm;
  reg [1:0] for_5_else_else_mux_itm;
  reg for_5_or_itm;
  reg [31:0] for_5_mux_itm;
  reg [31:0] for_5_mux_8_itm;
  reg MAIN_LOOP_else_or_itm;
  reg MAIN_LOOP_and_12_itm;
  reg MAIN_LOOP_else_and_3_itm;
  reg MAIN_LOOP_else_and_4_itm;
  reg UPDATE_MATRIX_LOOP_decCurBit_asn_6_itm;
  reg [12:0] UPDATE_MATRIX_LOOP_acc_5_itm;
  wire [13:0] xUPDATE_MATRIX_LOOP_acc_5_itm;
  reg iTailbitParamL0_lpi_dfm_1;
  reg [5:0] j_1_sva_2;
  reg [5:0] i_12_sva_2;
  reg [4:0] MAIN_LOOP_cnt_1_sva_2;
  reg [5:0] for_5_mux_12_itm_1;
  wire or_1788_cse;
  wire exit_for_7_sva_dfm_mx0;
  wire exit_for_6_sva_dfm_mx0;
  reg reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_1_cse;
  reg reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_sg1_cse;
  reg reg_eNewCodingScheme_triosy_mgc_io_sync_iswt0_cse;
  reg reg_InitDecode_return_triosy_mgc_io_sync_iswt0_cse;
  reg reg_start_sync_mgc_bsync_rv_iswt0_cse;
  reg reg_vecOutputBits_rsc_dualport_we_core_psct_1_cse;
  wire and_492_cse;
  wire and_599_cse;
  wire or_1535_cse;
  wire or_1561_cse;
  wire or_1574_cse;
  wire or_1656_cse;
  wire or_1708_cse;
  wire or_1761_cse;
  wire or_1832_cse;
  wire or_1863_cse;
  wire or_1876_cse;
  wire and_767_cse;
  reg [3:0] reg_if_acc_3_psp_sva_tmp_26;
  reg reg_iTailbitParamL0_lpi_dfm_sg1_tmp_30;
  reg [3:0] reg_else_acc_3_psp_sva_tmp_26;
  reg reg_iTailbitParamL1_sg1_lpi_dfm_tmp_30;
  wire or_1924_cse;
  wire or_1929_cse;
  wire or_1935_cse;
  wire nor_218_cse;
  wire and_790_cse;
  wire and_791_cse;
  wire and_793_cse;
  wire and_794_cse;
  wire and_789_cse;
  wire [3:0] MAIN_LOOP_b5_1_sva;
  wire [12:0] mux_187_rmff;
  wire [12:0] mux_188_rmff;
  wire [1:0] vecNewDistance_rTow0_rsc_dualport_re_core_sct_reg;
  wire mux_160_rmff;
  wire or_1192_rmff;
  wire [1:0] vecNewDistance_rTow1_rsc_dualport_re_core_sct_reg;
  wire [1:0] vecOutputBits_rsc_dualport_we_core_sct_reg;
  wire [7:0] mux_itm;
  wire [7:0] mux_1_itm;
  wire [7:0] mux_2_itm;
  wire [7:0] mux_3_itm;
  wire [2:0] for_4_acc_itm;
  wire [3:0] xfor_4_acc_itm;
  wire [33:0] for_acc_2_itm;
  wire [34:0] xfor_acc_2_itm;
  wire [33:0] for_1_acc_2_itm;
  wire [34:0] xfor_1_acc_2_itm;
  wire [6:0] for_3_acc_5_itm;
  wire [7:0] xfor_3_acc_5_itm;
  wire [6:0] for_2_acc_5_itm;
  wire [7:0] xfor_2_acc_5_itm;
  wire [33:0] for_5_acc_3_itm;
  wire [34:0] xfor_5_acc_3_itm;
  wire [33:0] BUTTERFLY_LOOP_if_1_acc_itm;
  wire [34:0] xBUTTERFLY_LOOP_if_1_acc_itm;
  wire [33:0] BUTTERFLY_LOOP_if_1_acc_3_itm;
  wire [34:0] xBUTTERFLY_LOOP_if_1_acc_3_itm;
  wire [33:0] MAIN_LOOP_acc_4_itm;
  wire [34:0] xMAIN_LOOP_acc_4_itm;
  wire [31:0] z_out;
  wire [32:0] xz_out;
  wire [33:0] z_out_1;
  wire [34:0] xz_out_1;
  wire [3:0] data_out_out;
  wire [3:0] data_out_out_1;
  wire [6:0] z_out_2;
  wire [7:0] xz_out_2;
  wire [31:0] z_out_4;
  wire [32:0] xz_out_4;
  wire [32:0] z_out_5;
  wire [33:0] xz_out_5;
  wire [31:0] z_out_6;
  wire [32:0] xz_out_6;
  wire [31:0] iTailbitParamL0_sva;
  wire [32:0] xiTailbitParamL0_sva;
  wire [3:0] if_slc_iPuncturingPatterns_psp_sva_1;
  wire [29:0] if_acc_3_psp_sva;
  wire [30:0] xif_acc_3_psp_sva;
  wire [30:0] iTailbitParamL0_lpi_dfm_sg1;
  wire iTailbitParamL0_lpi_dfm_2;
  wire [4:0] if_acc_4_ncse_sva;
  wire [5:0] xif_acc_4_ncse_sva;
  wire switch_lp_nor_4_cse;
  wire equal_tmp;
  wire nor_tmp;
  wire [29:0] else_acc_3_psp_sva;
  wire [30:0] xelse_acc_3_psp_sva;
  wire [30:0] iTailbitParamL1_sg1_lpi_dfm_mx0;
  wire iTailbitParamL1_1_lpi_dfm_1;
  wire [31:0] iNumOutBits_sva_mx0w0;
  wire [32:0] xiNumOutBits_sva_mx0w0;
  wire and_stg_14_sva;
  wire and_stg_6_sg1_sva;
  wire [1:0] for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva;
  wire [5:0] iTailbitPattern_2_lpi_dfm_mx0;
  wire [2:0] i_11_sva_1;
  wire [3:0] xi_11_sva_1;
  wire [31:0] iPunctCounter_sva_dfm_6;
  wire [31:0] iPunctCounter_sva_dfm_7;
  wire for_5_nor_cse;
  wire for_5_and_2_cse;
  wire nor_dfs_1_mx0w0;
  wire equal_tmp_1_mx0w0;
  wire nor_tmp_1_mx0w0;
  wire [31:0] iDistCnt_sva_6;
  wire [32:0] xiDistCnt_sva_6;
  wire [8:0] MAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1;
  wire [9:0] xMAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1;
  wire [8:0] MAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1;
  wire [9:0] xMAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1;
  wire [8:0] MAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1;
  wire [9:0] xMAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1;
  wire [8:0] MAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1;
  wire [9:0] xMAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1;
  wire MAIN_LOOP_else_and_5_cse;
  wire MAIN_LOOP_else_and_6_cse;
  reg [7:0] reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp;
  reg [7:0] reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp_1;
  reg [7:0] reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp;
  reg [7:0] reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp_1;
  wire [6:0] for_3_acc_4_sdt;
  wire [7:0] xfor_3_acc_4_sdt;
  wire [6:0] for_2_acc_4_sdt;
  wire [7:0] xfor_2_acc_4_sdt;
  wire for_5_if_if_nor_cse;
  reg [31:0] reg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse;
  wire [32:0] xreg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse;
  wire nor_233_cse;
  wire or_1955_cse;
  wire mux_197_cse;

  wire[0:0] mux_158_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_159_nl;
  wire[0:0] mux_213_nl;
  wire[0:0] for_2_mux_110_nl;
  wire[31:0] mux1h_15_nl;
  wire[3:0] mux_207_nl;
  wire[31:0] mux1h_12_nl;
  wire[0:0] mux_208_nl;
  wire[3:0] mux1h_51_nl;
  wire[0:0] mux_209_nl;
  wire[3:0] for_5_mux1h_1_nl;
  wire[12:0] mux1h_8_nl;
  wire[0:0] mux_182_nl;
  wire[12:0] mux1h_6_nl;
  wire[0:0] mux1h_45_nl;
  wire[0:0] mux1h_46_nl;
  wire[0:0] mux1h_47_nl;
  wire[0:0] mux1h_48_nl;
  wire[0:0] mux1h_49_nl;
  wire[0:0] mux_181_nl;
  wire[31:0] mux1h_215_nl;
  wire[31:0] mux_192_nl;
  wire[5:0] mux_195_nl;
  wire[31:0] mux1h_212_nl;
  wire[31:0] mux1h_213_nl;
  wire[31:0] mux1h_214_nl;
  InitDecodemgc_rom_23_130_4 #(.rom_id(23),
  .size(130),
  .width(4)) if_read_rom_iPuncturingPatterns_rom_map_1_rg (
      .addr(({if_acc_4_ncse_sva , (iPunctPatPartB_rsc_mgc_in_wire_d[1:0]) , 1'b1})),
      .data_out(if_slc_iPuncturingPatterns_psp_sva_1)
    );
  InitDecodemgc_rom_24_72_2 #(.rom_id(24),
  .size(72),
  .width(2)) for_4_read_rom_iPunctPatTailbits_rom_map_1_rg (
      .addr(({(({((iTailbitPattern_2_lpi_dfm_mx0[4:0]) + conv_u2u_1_5(i_11_sva[2]))
          , (i_11_sva[1])}) + iTailbitPattern_2_lpi_dfm_mx0) , (i_11_sva[0])})),
      .data_out(for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva)
    );
  InitDecodemgc_rom_25_32_4 #(.rom_id(25),
  .size(32),
  .width(4)) BUTTERFLY_LOOP_read_rom_MAIN_LOOP_met0_rom_map_1_rg (
      .addr((MAIN_LOOP_cnt_1_sva_2)),
      .data_out(MAIN_LOOP_b5_1_sva)
    );
  InitDecodemgc_rom_23_130_4 #(.rom_id(23),
  .size(130),
  .width(4)) rom_Xilinx_SPARTAN3_4_mgc_rom_23_130_4 (
      .addr(({(MUX_v_5_2_2({if_acc_4_ncse_sva , (for_3_acc_4_sdt[6:2])}, fsm_output[15]))
          , (MUX_v_2_2_2({(iPunctPatPartB_rsc_mgc_in_wire_d[1:0]) , (for_3_acc_4_sdt[1:0])},
          fsm_output[15])) , ((i_10_sva[0]) & (fsm_output[15]))})),
      .data_out(data_out_out)
    );
  InitDecodemgc_rom_23_130_4 #(.rom_id(23),
  .size(130),
  .width(4)) rom_Xilinx_SPARTAN3_4_mgc_rom_23_130_4_1 (
      .addr(({(MUX_v_5_2_2({((iPunctPatPartA_rsc_mgc_in_wire_d[6:2]) + (iPunctPatPartA_rsc_mgc_in_wire_d[4:0]))
          , (for_2_acc_4_sdt[6:2])}, fsm_output[15])) , (MUX_v_2_2_2({(iPunctPatPartA_rsc_mgc_in_wire_d[1:0])
          , (for_2_acc_4_sdt[1:0])}, fsm_output[15])) , ((i_9_sva[0]) & (fsm_output[15]))})),
      .data_out(data_out_out_1)
    );
  InitDecode_core_wait_ctrl InitDecode_core_wait_ctrl_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .vecNewDistance_rTow0_rsc_dualport_re_core_sct(vecNewDistance_rTow0_rsc_dualport_re_core_sct_reg),
      .vecNewDistance_rTow1_rsc_dualport_re_core_sct(vecNewDistance_rTow1_rsc_dualport_re_core_sct_reg),
      .vecOutputBits_rsc_dualport_we_core_sct(vecOutputBits_rsc_dualport_we_core_sct_reg),
      .mgc_start_sync_mgc_bsync_rv_rd_core_sct(mgc_start_sync_mgc_bsync_rv_rd_core_sct),
      .mgc_start_sync_mgc_bsync_rv_vd(mgc_start_sync_mgc_bsync_rv_vd),
      .mgc_done_sync_mgc_bsync_rdy_rd_core_sct(mgc_done_sync_mgc_bsync_rdy_rd_core_sct),
      .InitDecode_return_triosy_mgc_io_sync_ld_core_sct(InitDecode_return_triosy_mgc_io_sync_ld_core_sct),
      .vecOutputBits_triosy_mgc_io_sync_ld_core_sct(vecOutputBits_triosy_mgc_io_sync_ld_core_sct),
      .vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct(vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct),
      .vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct(vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct),
      .iLevel_triosy_mgc_io_sync_ld_core_sct(iLevel_triosy_mgc_io_sync_ld_core_sct),
      .iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct(iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct),
      .iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct(iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct),
      .iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct(iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct),
      .iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct(iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct),
      .iN2_triosy_mgc_io_sync_ld_core_sct(iN2_triosy_mgc_io_sync_ld_core_sct),
      .iN1_triosy_mgc_io_sync_ld_core_sct(iN1_triosy_mgc_io_sync_ld_core_sct),
      .eNewChannelType_triosy_mgc_io_sync_ld_core_sct(eNewChannelType_triosy_mgc_io_sync_ld_core_sct),
      .eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct(eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct),
      .vecNewDistance_rTow0_rsc_dualport_oswt_1(reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_1_cse),
      .vecNewDistance_rTow0_rsc_dualport_bcwt_1(vecNewDistance_rTow0_rsc_dualport_bcwt_1),
      .vecNewDistance_rTow0_rsc_dualport_oswt_2(reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_sg1_cse),
      .vecNewDistance_rTow0_rsc_dualport_bcwt_2(vecNewDistance_rTow0_rsc_dualport_bcwt_2),
      .vecNewDistance_rTow0_rsc_dualport_re_core_psct(({mux_160_rmff , or_1192_rmff})),
      .vecNewDistance_rTow1_rsc_dualport_bcwt_1(vecNewDistance_rTow1_rsc_dualport_bcwt_1),
      .vecNewDistance_rTow1_rsc_dualport_bcwt_2(vecNewDistance_rTow1_rsc_dualport_bcwt_2),
      .vecNewDistance_rTow1_rsc_dualport_re_core_psct(({mux_160_rmff , or_1192_rmff})),
      .vecOutputBits_rsc_dualport_oswt(reg_vecOutputBits_rsc_dualport_we_core_psct_1_cse),
      .vecOutputBits_rsc_dualport_we_core_psct(({1'b0 , (fsm_output[35])})),
      .mgc_start_sync_mgc_bsync_rv_rd_core_psct(reg_start_sync_mgc_bsync_rv_iswt0_cse),
      .mgc_done_sync_mgc_bsync_rdy_rd_core_psct(reg_InitDecode_return_triosy_mgc_io_sync_iswt0_cse),
      .vecOutputBits_triosy_mgc_io_sync_ld_core_psct(reg_eNewCodingScheme_triosy_mgc_io_sync_iswt0_cse),
      .vecNewDistance_rTow0_rsc_dualport_oswt_2_pff(mux_160_rmff),
      .vecNewDistance_rTow0_rsc_dualport_oswt_1_pff(or_1192_rmff),
      .vecOutputBits_rsc_dualport_oswt_pff((fsm_output[35]))
    );
  InitDecode_core_fsm InitDecode_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .fsm_output(fsm_output),
      .st_for_1_tr0((exit_for_6_sva | exit_for_1_sva | exit_for_1_sva_1 | exit_for_8_sva)),
      .st_for_1_for_1_tr0((j_1_sva_1[6])),
      .st_for_2_tr0(((mux_tmp_1 | exit_for_8_sva) & (exit_for_4_sva | (~ (for_4_acc_itm[2]))))),
      .st_for_5_3_tr0((exit_for_5_sva_dfm & exit_INIT_TRELLIS_LOOP_sva_dfm)),
      .st_main_12_tr0((~ (z_out_5[32]))),
      .st_BUTTERFLY_LOOP_6_tr0((MAIN_LOOP_cnt_1_sva_1[5])),
      .st_MAIN_LOOP_3_tr0((~ (MAIN_LOOP_acc_4_itm[33]))),
      .st_main_13_tr0((~ (z_out_5[32]))),
      .st_UPDATE_MATRIX_LOOP_2_tr0(exit_UPDATE_MATRIX_LOOP_sva)
    );
  assign mux_itm = MUX_v_8_2_2({(vecNewDistance_rTow0_rsc_dualport_data_out[15:8])
      , reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp}, vecNewDistance_rTow0_rsc_dualport_bcwt_2);
  assign mux_1_itm = MUX_v_8_2_2({(vecNewDistance_rTow0_rsc_dualport_data_out[7:0])
      , reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp_1}, vecNewDistance_rTow0_rsc_dualport_bcwt_1);
  assign mux_2_itm = MUX_v_8_2_2({(vecNewDistance_rTow1_rsc_dualport_data_out[15:8])
      , reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp}, vecNewDistance_rTow1_rsc_dualport_bcwt_2);
  assign mux_3_itm = MUX_v_8_2_2({(vecNewDistance_rTow1_rsc_dualport_data_out[7:0])
      , reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp_1}, vecNewDistance_rTow1_rsc_dualport_bcwt_1);
  assign mux_157_nl = MUX_s_1_2_2({(~ (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[2]))
      , (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[2])}, MAIN_LOOP_slc_veciTablePuncPat_cse_sva[1]);
  assign mux_158_nl = MUX_s_1_2_2({((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[1]) |
      (~ (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[2]))) , (mux_157_nl)}, MAIN_LOOP_slc_veciTablePuncPat_cse_sva[0]);
  assign or_1192_rmff = ((or_dcpl_1169 | or_dcpl_1166 | or_dcpl_1162 | (mux_158_nl)
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[15]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[16])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[17]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[18])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[19]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[20])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[21]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[22])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[23]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[24])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[25]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[26])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[27]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[28])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[29]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[30])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[31])) & (fsm_output[23])) | (fsm_output[22]);
  assign mux_159_nl = MUX_s_1_2_2({(~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[2])
      & (~ and_tmp_4))) , ((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[2]) | and_tmp_4)},
      MAIN_LOOP_slc_veciTablePuncPat_cse_sva[1]);
  assign mux_160_rmff = MUX_s_1_2_2({and_tmp_4 , ((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[3])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[4]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[5])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[6]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[7])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[8]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[9])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[10]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[11])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[12]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[13])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[14]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[15])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[16]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[17])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[18]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[19])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[20]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[21])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[22]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[23])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[24]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[25])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[26]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[27])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[28]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[29])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[30]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[31])
      | (mux_159_nl))}, fsm_output[23]);
  assign and_492_cse = (or_dcpl_1208 | or_dcpl_1205) & (~((io_read_iLevel_rsc_d_svs[1])
      | (io_read_iLevel_rsc_d_svs[2]) | (io_read_iLevel_rsc_d_svs[3]))) & (~((io_read_iLevel_rsc_d_svs[4])
      | (io_read_iLevel_rsc_d_svs[5]) | (io_read_iLevel_rsc_d_svs[6]))) & (~((io_read_iLevel_rsc_d_svs[7])
      | (io_read_iLevel_rsc_d_svs[8]))) & (~((io_read_iLevel_rsc_d_svs[9]) | (io_read_iLevel_rsc_d_svs[10])
      | (io_read_iLevel_rsc_d_svs[11]))) & (~((io_read_iLevel_rsc_d_svs[12]) | (io_read_iLevel_rsc_d_svs[13])))
      & (~((io_read_iLevel_rsc_d_svs[14]) | (io_read_iLevel_rsc_d_svs[15]) | (io_read_iLevel_rsc_d_svs[16])))
      & (~((io_read_iLevel_rsc_d_svs[17]) | (io_read_iLevel_rsc_d_svs[18]))) & (~((io_read_iLevel_rsc_d_svs[19])
      | (io_read_iLevel_rsc_d_svs[20]) | (io_read_iLevel_rsc_d_svs[21]))) & (~((io_read_iLevel_rsc_d_svs[22])
      | (io_read_iLevel_rsc_d_svs[23]))) & (~((io_read_iLevel_rsc_d_svs[24]) | (io_read_iLevel_rsc_d_svs[25])
      | (io_read_iLevel_rsc_d_svs[26]))) & (~((io_read_iLevel_rsc_d_svs[27]) | (io_read_iLevel_rsc_d_svs[28])))
      & (~((io_read_iLevel_rsc_d_svs[29]) | (io_read_iLevel_rsc_d_svs[30]))) & (~((io_read_iLevel_rsc_d_svs[31])
      | (io_read_iLevel_rsc_d_svs[0])));
  assign or_1929_cse = (fsm_output[27]) | (fsm_output[30]);
  assign and_599_cse = (or_dcpl_1169 | or_dcpl_1166 | or_dcpl_1162 | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[15])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[16]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[17])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[18]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[19])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[20]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[21])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[22]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[23])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[24]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[25])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[26]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[27])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[28]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[29])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[30]) | (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[2])
      ^ (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[1]))) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[31]))
      & (fsm_output[23]);
  assign or_1535_cse = or_dcpl_1208 | or_dcpl_308 | (fsm_output[8]) | (fsm_output[9]);
  assign or_1561_cse = or_dcpl_1535 | or_dcpl_339 | (fsm_output[3]);
  assign or_1574_cse = or_dcpl_1208 | or_dcpl_1205 | or_dcpl_305 | or_dcpl_667 |
      (fsm_output[11]) | (fsm_output[15]) | (fsm_output[13]);
  assign or_1656_cse = or_dcpl_1535 | or_dcpl_339 | or_dcpl_336 | or_dcpl_305 | or_dcpl_1619
      | or_dcpl_1358 | or_dcpl_1357 | or_dcpl_1355 | or_dcpl_1609 | (fsm_output[23])
      | (fsm_output[22]) | (fsm_output[31]) | or_dcpl_1186 | or_dcpl_1291 | (fsm_output[21])
      | (fsm_output[28]) | or_dcpl_807 | (fsm_output[27]) | (fsm_output[13]) | (fsm_output[34])
      | (fsm_output[35]);
  assign or_1708_cse = or_dcpl_1535 | or_dcpl_339 | or_dcpl_1368 | or_dcpl_1364 |
      or_dcpl_1200 | or_dcpl_823 | or_dcpl_1609 | or_dcpl_1666;
  assign or_1761_cse = or_dcpl_667 | (fsm_output[11]) | or_dcpl_1666;
  assign and_767_cse = (fsm_output[31]) & (MAIN_LOOP_cnt_1_sva_1[5]);
  assign for_5_if_if_nor_cse = ~((z_out_4[31]) | (z_out_4[30]) | (z_out_4[29]) |
      (z_out_4[28]) | (z_out_4[27]) | (z_out_4[26]) | (z_out_4[25]) | (z_out_4[24])
      | (z_out_4[23]) | (z_out_4[22]) | (z_out_4[21]) | (z_out_4[20]) | (z_out_4[19])
      | (z_out_4[18]) | (z_out_4[17]) | (z_out_4[16]) | (z_out_4[15]) | (z_out_4[14])
      | (z_out_4[13]) | (z_out_4[12]) | (z_out_4[11]) | (z_out_4[10]) | (z_out_4[9])
      | (z_out_4[8]) | (z_out_4[7]) | (z_out_4[6]) | (z_out_4[5]) | (z_out_4[4]));
  assign or_1832_cse = or_dcpl_298 | (fsm_output[24]) | (fsm_output[23]) | (fsm_output[31])
      | or_dcpl_1776;
  assign or_1863_cse = or_dcpl_298 | (fsm_output[24]) | (fsm_output[31]) | or_dcpl_1776;
  assign or_1876_cse = or_dcpl_298 | (fsm_output[31]) | (fsm_output[28]) | or_dcpl_807
      | (fsm_output[27]);
  assign nor_218_cse = ~(unequal_tmp_1 | or_1876_cse);
  assign and_790_cse = MAIN_LOOP_else_and_5_cse & (~ or_1876_cse);
  assign and_791_cse = MAIN_LOOP_else_and_6_cse & (~ or_1876_cse);
  assign and_789_cse = MAIN_LOOP_else_or_itm & unequal_tmp_1 & (~ or_1876_cse);
  assign and_793_cse = nor_dfs_1 & unequal_tmp_1 & (~ or_1876_cse);
  assign and_794_cse = equal_tmp_1 & unequal_tmp_1 & (~ or_1876_cse);
  assign xiTailbitParamL0_sva = iN1_rsc_mgc_in_wire_d + iN2_rsc_mgc_in_wire_d;
  assign iTailbitParamL0_sva = xiTailbitParamL0_sva[31:0];
  assign xif_acc_3_psp_sva = (iTailbitParamL0_lpi_dfm_sg1[30:1]) + 30'b111111111111111111111111111101;
  assign if_acc_3_psp_sva = xif_acc_3_psp_sva[29:0];
  assign iTailbitParamL0_lpi_dfm_sg1 = MUX1HOT_v_31_3_2({(iTailbitParamL0_sva[31:1])
      , ((iN1_rsc_mgc_in_wire_d[30:0]) + (iN2_rsc_mgc_in_wire_d[30:0])) , (iN2_rsc_mgc_in_wire_d[30:0])},
      {switch_lp_nor_4_cse , equal_tmp , nor_tmp});
  assign iTailbitParamL0_lpi_dfm_2 = (iTailbitParamL0_sva[0]) & switch_lp_nor_4_cse;
  assign xif_acc_4_ncse_sva = (iPunctPatPartB_rsc_mgc_in_wire_d[6:2]) + (iPunctPatPartB_rsc_mgc_in_wire_d[4:0]);
  assign if_acc_4_ncse_sva = xif_acc_4_ncse_sva[4:0];
  assign switch_lp_nor_4_cse = ~(equal_tmp | nor_tmp);
  assign switch_lp_nor_tmp = ~((eNewCodingScheme_rsc_mgc_in_wire_d[31]) | (eNewCodingScheme_rsc_mgc_in_wire_d[30])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[29]) | (eNewCodingScheme_rsc_mgc_in_wire_d[28])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[27]) | (eNewCodingScheme_rsc_mgc_in_wire_d[26])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[25]) | (eNewCodingScheme_rsc_mgc_in_wire_d[24])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[23]) | (eNewCodingScheme_rsc_mgc_in_wire_d[22])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[21]) | (eNewCodingScheme_rsc_mgc_in_wire_d[20])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[19]) | (eNewCodingScheme_rsc_mgc_in_wire_d[18])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[17]) | (eNewCodingScheme_rsc_mgc_in_wire_d[16])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[15]) | (eNewCodingScheme_rsc_mgc_in_wire_d[14])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[13]) | (eNewCodingScheme_rsc_mgc_in_wire_d[12])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[11]) | (eNewCodingScheme_rsc_mgc_in_wire_d[10])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[9]) | (eNewCodingScheme_rsc_mgc_in_wire_d[8])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[7]) | (eNewCodingScheme_rsc_mgc_in_wire_d[6])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[5]) | (eNewCodingScheme_rsc_mgc_in_wire_d[4])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[3]) | (eNewCodingScheme_rsc_mgc_in_wire_d[2]));
  assign equal_tmp = (eNewCodingScheme_rsc_mgc_in_wire_d[1]) & (eNewCodingScheme_rsc_mgc_in_wire_d[0])
      & switch_lp_nor_tmp;
  assign switch_lp_nor_1_tmp = ~((eNewCodingScheme_rsc_mgc_in_wire_d[31]) | (eNewCodingScheme_rsc_mgc_in_wire_d[30])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[29]) | (eNewCodingScheme_rsc_mgc_in_wire_d[28])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[27]) | (eNewCodingScheme_rsc_mgc_in_wire_d[26])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[25]) | (eNewCodingScheme_rsc_mgc_in_wire_d[24])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[23]) | (eNewCodingScheme_rsc_mgc_in_wire_d[22])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[21]) | (eNewCodingScheme_rsc_mgc_in_wire_d[20])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[19]) | (eNewCodingScheme_rsc_mgc_in_wire_d[18])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[17]) | (eNewCodingScheme_rsc_mgc_in_wire_d[16])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[15]) | (eNewCodingScheme_rsc_mgc_in_wire_d[14])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[13]) | (eNewCodingScheme_rsc_mgc_in_wire_d[12])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[11]) | (eNewCodingScheme_rsc_mgc_in_wire_d[10])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[9]) | (eNewCodingScheme_rsc_mgc_in_wire_d[8])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[7]) | (eNewCodingScheme_rsc_mgc_in_wire_d[6])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[5]) | (eNewCodingScheme_rsc_mgc_in_wire_d[4])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[3]) | (eNewCodingScheme_rsc_mgc_in_wire_d[1])
      | (eNewCodingScheme_rsc_mgc_in_wire_d[0]));
  assign nor_tmp = ~(((eNewCodingScheme_rsc_mgc_in_wire_d[2]) & switch_lp_nor_1_tmp)
      | equal_tmp);
  assign xelse_acc_3_psp_sva = (iTailbitParamL1_sg1_lpi_dfm_mx0[30:1]) + 30'b111111111111111111111111111101;
  assign else_acc_3_psp_sva = xelse_acc_3_psp_sva[29:0];
  assign iTailbitParamL1_sg1_lpi_dfm_mx0 = MUX_v_31_2_2({(iN2_rsc_mgc_in_wire_d[30:0])
      , (iN2_rsc_mgc_in_wire_d[31:1])}, (~((eNewCodingScheme_rsc_mgc_in_wire_d[1])
      & (eNewCodingScheme_rsc_mgc_in_wire_d[0]) & switch_lp_nor_tmp)) & (eNewCodingScheme_rsc_mgc_in_wire_d[2])
      & switch_lp_nor_1_tmp);
  assign iTailbitParamL1_1_lpi_dfm_1 = (iN2_rsc_mgc_in_wire_d[0]) & switch_lp_nor_4_cse;
  assign xiNumOutBits_sva_mx0w0 = iNewNumOutBitsPartA_rsc_mgc_in_wire_d + iNewNumOutBitsPartB_rsc_mgc_in_wire_d;
  assign iNumOutBits_sva_mx0w0 = xiNumOutBits_sva_mx0w0[31:0];
  assign xfor_4_acc_itm = ({1'b1 , (i_11_sva_1[2:1])}) + 3'b1;
  assign for_4_acc_itm = xfor_4_acc_itm[2:0];
  assign xfor_acc_2_itm = conv_s2u_33_34({i_1_sva , 1'b1}) + conv_s2u_33_34({(~ acc_3_psp_sva)
      , (~ (iNumOutBits_sva[0])) , 1'b1});
  assign for_acc_2_itm = xfor_acc_2_itm[33:0];
  assign xfor_1_acc_2_itm = conv_s2u_33_34({i_2_sva , 1'b1}) + conv_s2u_33_34({(~
      acc_3_psp_sva) , (~ (iNumOutBits_sva[0])) , 1'b1});
  assign for_1_acc_2_itm = xfor_1_acc_2_itm[33:0];
  assign and_stg_14_sva = ~((i_11_sva[1]) | (i_11_sva[0]));
  assign and_stg_6_sg1_sva = (~ (i_11_sva[1])) & (i_11_sva[0]);
  assign iTailbitPattern_2_lpi_dfm_mx0 = MUX_v_6_2_2({iTailbitPattern_2_sva , iTailbitPattern_2_sva_1},
      or_psp);
  assign xfor_3_acc_5_itm = conv_u2s_6_7({i_10_sva , 1'b1}) + conv_s2s_6_7({1'b1
      , (~ slc_iPuncturingPatterns_1_psp_sva) , 1'b1});
  assign for_3_acc_5_itm = xfor_3_acc_5_itm[6:0];
  assign xfor_2_acc_5_itm = conv_u2s_6_7({i_9_sva , 1'b1}) + conv_s2s_6_7({1'b1 ,
      (~ slc_iPuncturingPatterns_psp_sva) , 1'b1});
  assign for_2_acc_5_itm = xfor_2_acc_5_itm[6:0];
  assign mux_213_nl = MUX_s_1_2_2({mux_197_cse , exit_for_sva}, exit_for_sva);
  assign exit_for_6_sva_dfm_mx0 = ((mux_213_nl) & (exit_for_1_sva_1 | exit_for_1_sva))
      | exit_for_6_sva;
  assign or_1924_cse = (~ (for_3_acc_5_itm[6])) | exit_for_3_sva;
  assign for_2_mux_110_nl = MUX_s_1_2_2({(~ (for_2_acc_5_itm[6])) , exit_for_2_sva},
      exit_for_2_sva);
  assign exit_for_7_sva_dfm_mx0 = ((for_2_mux_110_nl) & or_1924_cse) | exit_for_7_sva;
  assign xi_11_sva_1 = i_11_sva + 3'b1;
  assign i_11_sva_1 = xi_11_sva_1[2:0];
  assign xfor_5_acc_3_itm = conv_s2u_33_34({i_6_sva , 1'b1}) + conv_s2u_33_34({(~
      acc_3_psp_sva) , (~ (iNumOutBits_sva[0])) , 1'b1});
  assign for_5_acc_3_itm = xfor_5_acc_3_itm[33:0];
  assign iPunctCounter_sva_dfm_6 = iPunctCounter_sva & (signext_32_1(i_6_sva != iNewNumOutBitsPartA_1_sva));
  assign iPunctCounter_sva_dfm_7 = iPunctCounter_sva & (signext_32_1(i_6_sva != iNumOutBits_sva));
  assign for_5_nor_cse = ~(for_5_else_lor_lpi_1_dfm | for_5_slc_1_svs);
  assign for_5_and_2_cse = for_5_else_lor_lpi_1_dfm & (~ for_5_slc_1_svs);
  assign nor_dfs_1_mx0w0 = ~(equal_tmp_1_mx0w0 | nor_tmp_1_mx0w0);
  assign equal_tmp_1_mx0w0 = (veciTablePuncPat_rsc_dualport_data_out[1]) & (veciTablePuncPat_rsc_dualport_data_out[0])
      & (~((veciTablePuncPat_rsc_dualport_data_out[31]) | (veciTablePuncPat_rsc_dualport_data_out[30])
      | (veciTablePuncPat_rsc_dualport_data_out[29]) | (veciTablePuncPat_rsc_dualport_data_out[28])
      | (veciTablePuncPat_rsc_dualport_data_out[27]) | (veciTablePuncPat_rsc_dualport_data_out[26])
      | (veciTablePuncPat_rsc_dualport_data_out[25]) | (veciTablePuncPat_rsc_dualport_data_out[24])
      | (veciTablePuncPat_rsc_dualport_data_out[23]) | (veciTablePuncPat_rsc_dualport_data_out[22])
      | (veciTablePuncPat_rsc_dualport_data_out[21]) | (veciTablePuncPat_rsc_dualport_data_out[20])
      | (veciTablePuncPat_rsc_dualport_data_out[19]) | (veciTablePuncPat_rsc_dualport_data_out[18])
      | (veciTablePuncPat_rsc_dualport_data_out[17]) | (veciTablePuncPat_rsc_dualport_data_out[16])
      | (veciTablePuncPat_rsc_dualport_data_out[15]) | (veciTablePuncPat_rsc_dualport_data_out[14])
      | (veciTablePuncPat_rsc_dualport_data_out[13]) | (veciTablePuncPat_rsc_dualport_data_out[12])
      | (veciTablePuncPat_rsc_dualport_data_out[11]) | (veciTablePuncPat_rsc_dualport_data_out[10])
      | (veciTablePuncPat_rsc_dualport_data_out[9]) | (veciTablePuncPat_rsc_dualport_data_out[8])
      | (veciTablePuncPat_rsc_dualport_data_out[7]) | (veciTablePuncPat_rsc_dualport_data_out[6])
      | (veciTablePuncPat_rsc_dualport_data_out[5]) | (veciTablePuncPat_rsc_dualport_data_out[4])
      | (veciTablePuncPat_rsc_dualport_data_out[3]) | (veciTablePuncPat_rsc_dualport_data_out[2])));
  assign nor_tmp_1_mx0w0 = ~(((veciTablePuncPat_rsc_dualport_data_out[2]) & (veciTablePuncPat_rsc_dualport_data_out[0])
      & (~((veciTablePuncPat_rsc_dualport_data_out[31]) | (veciTablePuncPat_rsc_dualport_data_out[30])
      | (veciTablePuncPat_rsc_dualport_data_out[29]) | (veciTablePuncPat_rsc_dualport_data_out[28])
      | (veciTablePuncPat_rsc_dualport_data_out[27]) | (veciTablePuncPat_rsc_dualport_data_out[26])
      | (veciTablePuncPat_rsc_dualport_data_out[25]) | (veciTablePuncPat_rsc_dualport_data_out[24])
      | (veciTablePuncPat_rsc_dualport_data_out[23]) | (veciTablePuncPat_rsc_dualport_data_out[22])
      | (veciTablePuncPat_rsc_dualport_data_out[21]) | (veciTablePuncPat_rsc_dualport_data_out[20])
      | (veciTablePuncPat_rsc_dualport_data_out[19]) | (veciTablePuncPat_rsc_dualport_data_out[18])
      | (veciTablePuncPat_rsc_dualport_data_out[17]) | (veciTablePuncPat_rsc_dualport_data_out[16])
      | (veciTablePuncPat_rsc_dualport_data_out[15]) | (veciTablePuncPat_rsc_dualport_data_out[14])
      | (veciTablePuncPat_rsc_dualport_data_out[13]) | (veciTablePuncPat_rsc_dualport_data_out[12])
      | (veciTablePuncPat_rsc_dualport_data_out[11]) | (veciTablePuncPat_rsc_dualport_data_out[10])
      | (veciTablePuncPat_rsc_dualport_data_out[9]) | (veciTablePuncPat_rsc_dualport_data_out[8])
      | (veciTablePuncPat_rsc_dualport_data_out[7]) | (veciTablePuncPat_rsc_dualport_data_out[6])
      | (veciTablePuncPat_rsc_dualport_data_out[5]) | (veciTablePuncPat_rsc_dualport_data_out[4])
      | (veciTablePuncPat_rsc_dualport_data_out[3]) | (veciTablePuncPat_rsc_dualport_data_out[1]))))
      | equal_tmp_1_mx0w0);
  assign xiDistCnt_sva_6 = iDistCnt_sva_2 + 32'b1;
  assign iDistCnt_sva_6 = xiDistCnt_sva_6[31:0];
  assign xMAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1 = conv_s2s_8_9(mux_2_itm) + conv_s2s_8_9(mux_3_itm);
  assign MAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1 = xMAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1[8:0];
  assign xMAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1 = conv_s2s_8_9(mux_itm) + conv_s2s_8_9(mux_3_itm);
  assign MAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1 = xMAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1[8:0];
  assign xMAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1 = conv_s2s_8_9(mux_2_itm) + conv_s2s_8_9(mux_1_itm);
  assign MAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1 = xMAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1[8:0];
  assign xMAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1 = conv_s2s_8_9(mux_itm) + conv_s2s_8_9(mux_1_itm);
  assign MAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1 = xMAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1[8:0];
  assign MAIN_LOOP_else_and_5_cse = (~ unequal_tmp_2) & nor_tmp_4 & unequal_tmp_1;
  assign MAIN_LOOP_else_and_6_cse = unequal_tmp_2 & nor_tmp_4 & unequal_tmp_1;
  assign xBUTTERFLY_LOOP_if_1_acc_itm = conv_s2u_33_34({BUTTERFLY_LOOP_rFiStAccMetricPrev0_sva
      , 1'b1}) + conv_s2u_33_34({(~ reg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse)
      , 1'b1});
  assign BUTTERFLY_LOOP_if_1_acc_itm = xBUTTERFLY_LOOP_if_1_acc_itm[33:0];
  assign xBUTTERFLY_LOOP_if_1_acc_3_itm = conv_s2u_33_34({reg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse
      , 1'b1}) + conv_s2u_33_34({(~ BUTTERFLY_LOOP_rSecStAccMetricPrev1_sva) , 1'b1});
  assign BUTTERFLY_LOOP_if_1_acc_3_itm = xBUTTERFLY_LOOP_if_1_acc_3_itm[33:0];
  assign xMAIN_LOOP_acc_4_itm = conv_s2u_33_34({z_out_6 , 1'b1}) + conv_s2u_33_34({(~
      acc_3_psp_sva) , (~ (iNumOutBits_sva[0])) , 1'b1});
  assign MAIN_LOOP_acc_4_itm = xMAIN_LOOP_acc_4_itm[33:0];
  assign or_dcpl_284 = (fsm_output[30]) | (fsm_output[27]);
  assign or_dcpl_286 = (fsm_output[28]) | (fsm_output[37]);
  assign or_dcpl_298 = (fsm_output[26]) | (fsm_output[29]);
  assign or_dcpl_305 = (fsm_output[9]) | (fsm_output[10]);
  assign or_dcpl_308 = (fsm_output[4]) | (fsm_output[3]);
  assign or_dcpl_311 = (fsm_output[2]) | (fsm_output[7]);
  assign or_dcpl_317 = (fsm_output[45]) | (fsm_output[46]);
  assign or_dcpl_323 = (fsm_output[38]) | (fsm_output[39]);
  assign or_dcpl_336 = (fsm_output[3]) | (fsm_output[8]);
  assign or_dcpl_339 = (fsm_output[5]) | (fsm_output[4]);
  assign mux_tmp = MUX_s_1_2_2({exit_for_6_sva , (exit_for_1_sva_1 | exit_for_1_sva
      | exit_for_6_sva)}, exit_for_sva_1 | exit_for_sva);
  assign mux_tmp_1 = MUX_s_1_2_2({(exit_for_7_sva & mux_tmp) , (((~ (for_2_acc_5_itm[6]))
      | exit_for_2_sva | exit_for_7_sva) & mux_tmp)}, or_1924_cse);
  assign or_dcpl_667 = (fsm_output[12]) | (fsm_output[14]);
  assign or_dcpl_736 = (fsm_output[18]) | (fsm_output[20]);
  assign or_dcpl_807 = (fsm_output[25]) | (fsm_output[30]);
  assign or_dcpl_816 = (fsm_output[23]) | (fsm_output[22]);
  assign or_dcpl_823 = (fsm_output[11]) | (fsm_output[16]);
  assign and_dcpl_444 = ~((fsm_output[10]) | (fsm_output[15]));
  assign or_dcpl_882 = ~((i_10_sva[1]) & (i_10_sva[0]));
  assign or_dcpl_883 = ~((i_10_sva[3]) & (i_10_sva[2]));
  assign or_dcpl_885 = exit_for_8_sva | (~ (fsm_output[15]));
  assign or_dcpl_886 = exit_for_7_sva | exit_for_3_sva;
  assign or_dcpl_887 = or_dcpl_886 | (~ (for_3_acc_5_itm[6]));
  assign or_dcpl_890 = (~ (i_10_sva[1])) | (i_10_sva[0]);
  assign or_dcpl_898 = (i_10_sva[1]) | (~ (i_10_sva[0]));
  assign or_dcpl_906 = (i_10_sva[1]) | (i_10_sva[0]);
  assign or_dcpl_915 = (~ (i_10_sva[3])) | (i_10_sva[2]);
  assign or_dcpl_947 = (i_10_sva[3]) | (~ (i_10_sva[2]));
  assign or_dcpl_979 = (i_10_sva[3]) | (i_10_sva[2]);
  assign or_dcpl_1010 = ~((i_9_sva[1]) & (i_9_sva[0]));
  assign or_dcpl_1011 = ~((i_9_sva[3]) & (i_9_sva[2]));
  assign or_dcpl_1014 = exit_for_7_sva | exit_for_2_sva;
  assign or_dcpl_1015 = or_dcpl_1014 | (~ (for_2_acc_5_itm[6]));
  assign or_dcpl_1018 = (~ (i_9_sva[1])) | (i_9_sva[0]);
  assign or_dcpl_1026 = (i_9_sva[1]) | (~ (i_9_sva[0]));
  assign or_dcpl_1034 = (i_9_sva[1]) | (i_9_sva[0]);
  assign or_dcpl_1043 = (~ (i_9_sva[3])) | (i_9_sva[2]);
  assign or_dcpl_1075 = (i_9_sva[3]) | (~ (i_9_sva[2]));
  assign or_dcpl_1107 = (i_9_sva[3]) | (i_9_sva[2]);
  assign or_dcpl_1162 = (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[11]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[12])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[13]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[14]);
  assign or_dcpl_1166 = (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[7]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[8])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[9]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[10]);
  assign or_dcpl_1169 = (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[3]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[4])
      | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[5]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[6]);
  assign and_tmp_4 = (fsm_output[22]) & ((veciTablePuncPat_rsc_dualport_data_out[31])
      | (veciTablePuncPat_rsc_dualport_data_out[30]) | (veciTablePuncPat_rsc_dualport_data_out[29])
      | (veciTablePuncPat_rsc_dualport_data_out[28]) | (veciTablePuncPat_rsc_dualport_data_out[27])
      | (veciTablePuncPat_rsc_dualport_data_out[26]) | (veciTablePuncPat_rsc_dualport_data_out[25])
      | (veciTablePuncPat_rsc_dualport_data_out[24]) | (veciTablePuncPat_rsc_dualport_data_out[23])
      | (veciTablePuncPat_rsc_dualport_data_out[22]) | (veciTablePuncPat_rsc_dualport_data_out[21])
      | (veciTablePuncPat_rsc_dualport_data_out[20]) | (veciTablePuncPat_rsc_dualport_data_out[19])
      | (veciTablePuncPat_rsc_dualport_data_out[18]) | (veciTablePuncPat_rsc_dualport_data_out[17])
      | (veciTablePuncPat_rsc_dualport_data_out[16]) | (veciTablePuncPat_rsc_dualport_data_out[15])
      | (veciTablePuncPat_rsc_dualport_data_out[14]) | (veciTablePuncPat_rsc_dualport_data_out[13])
      | (veciTablePuncPat_rsc_dualport_data_out[12]) | (veciTablePuncPat_rsc_dualport_data_out[11])
      | (veciTablePuncPat_rsc_dualport_data_out[10]) | (veciTablePuncPat_rsc_dualport_data_out[9])
      | (veciTablePuncPat_rsc_dualport_data_out[8]) | (veciTablePuncPat_rsc_dualport_data_out[7])
      | (veciTablePuncPat_rsc_dualport_data_out[6]) | (veciTablePuncPat_rsc_dualport_data_out[5])
      | (veciTablePuncPat_rsc_dualport_data_out[4]) | (veciTablePuncPat_rsc_dualport_data_out[3])
      | (~ (veciTablePuncPat_rsc_dualport_data_out[2])) | (veciTablePuncPat_rsc_dualport_data_out[1])
      | (veciTablePuncPat_rsc_dualport_data_out[0]));
  assign or_dcpl_1175 = (fsm_output[50]) | (fsm_output[34]);
  assign or_dcpl_1178 = or_dcpl_284 | (fsm_output[13]);
  assign or_dcpl_1186 = (fsm_output[15]) | (fsm_output[32]);
  assign or_dcpl_1195 = or_dcpl_823 | or_dcpl_298;
  assign or_dcpl_1200 = (fsm_output[20]) | (fsm_output[12]) | (fsm_output[14]);
  assign or_dcpl_1205 = or_dcpl_308 | (fsm_output[8]);
  assign or_dcpl_1208 = or_dcpl_311 | (fsm_output[6]) | (fsm_output[5]);
  assign or_dcpl_1217 = (fsm_output[42]) | (fsm_output[43]) | (fsm_output[44]);
  assign or_dcpl_1220 = or_dcpl_323 | (fsm_output[40]) | (fsm_output[41]);
  assign and_tmp_5 = ((fsm_output[8]) | (fsm_output[3]) | (fsm_output[4]) | (fsm_output[5])
      | (fsm_output[6]) | (fsm_output[7]) | (fsm_output[2])) & ((io_read_iLevel_rsc_d_svs[0])
      | (io_read_iLevel_rsc_d_svs[31]) | (io_read_iLevel_rsc_d_svs[30]) | (io_read_iLevel_rsc_d_svs[29])
      | (io_read_iLevel_rsc_d_svs[28]) | (io_read_iLevel_rsc_d_svs[27]) | (io_read_iLevel_rsc_d_svs[26])
      | (io_read_iLevel_rsc_d_svs[25]) | (io_read_iLevel_rsc_d_svs[24]) | (io_read_iLevel_rsc_d_svs[23])
      | (io_read_iLevel_rsc_d_svs[22]) | (io_read_iLevel_rsc_d_svs[21]) | (io_read_iLevel_rsc_d_svs[20])
      | (io_read_iLevel_rsc_d_svs[19]) | (io_read_iLevel_rsc_d_svs[18]) | (io_read_iLevel_rsc_d_svs[17])
      | (io_read_iLevel_rsc_d_svs[16]) | (io_read_iLevel_rsc_d_svs[15]) | (io_read_iLevel_rsc_d_svs[14])
      | (io_read_iLevel_rsc_d_svs[13]) | (io_read_iLevel_rsc_d_svs[12]) | (io_read_iLevel_rsc_d_svs[11])
      | (io_read_iLevel_rsc_d_svs[10]) | (io_read_iLevel_rsc_d_svs[9]) | (io_read_iLevel_rsc_d_svs[8])
      | (io_read_iLevel_rsc_d_svs[7]) | (io_read_iLevel_rsc_d_svs[6]) | (io_read_iLevel_rsc_d_svs[5])
      | (io_read_iLevel_rsc_d_svs[4]) | (io_read_iLevel_rsc_d_svs[3]) | (io_read_iLevel_rsc_d_svs[2])
      | (io_read_iLevel_rsc_d_svs[1]));
  assign and_dcpl_547 = (fsm_output[37]) & (~ pOldTrelMetric_2_sva);
  assign and_dcpl_548 = (fsm_output[37]) & pOldTrelMetric_2_sva;
  assign or_dcpl_1268 = (fsm_output[47]) | (fsm_output[48]);
  assign or_dcpl_1272 = (fsm_output[41]) | (fsm_output[42]);
  assign or_dcpl_1275 = or_dcpl_323 | (fsm_output[40]);
  assign and_dcpl_553 = (~(exit_for_6_sva | exit_for_sva)) & (for_acc_2_itm[33]);
  assign or_dcpl_1283 = (fsm_output[0]) | (fsm_output[35]);
  assign or_dcpl_1290 = (fsm_output[21]) | (fsm_output[1]);
  assign or_dcpl_1291 = (fsm_output[33]) | (fsm_output[36]);
  assign and_dcpl_557 = (fsm_output[17]) & exit_INIT_TRELLIS_LOOP_sva;
  assign or_dcpl_1317 = (fsm_output[49]) | (fsm_output[51]);
  assign and_dcpl_558 = or_dcpl_284 & (~ pCurTrelMetric_2_sva);
  assign or_dcpl_1342 = (fsm_output[13]) | (fsm_output[50]) | (fsm_output[34]);
  assign or_dcpl_1345 = (fsm_output[37]) | (fsm_output[30]) | (fsm_output[27]);
  assign or_dcpl_1347 = ((fsm_output[36]) & (~ exit_UPDATE_MATRIX_LOOP_sva)) | or_dcpl_1290;
  assign or_dcpl_1351 = (fsm_output[31]) | (fsm_output[15]) | (fsm_output[32]);
  assign or_dcpl_1353 = (fsm_output[19]) | (fsm_output[23]) | (fsm_output[22]);
  assign or_dcpl_1355 = (fsm_output[29]) | (fsm_output[24]);
  assign or_dcpl_1356 = or_dcpl_1355 | (fsm_output[17]);
  assign or_dcpl_1357 = (fsm_output[16]) | (fsm_output[26]);
  assign or_dcpl_1358 = (fsm_output[14]) | (fsm_output[11]);
  assign or_dcpl_1359 = or_dcpl_1358 | or_dcpl_1357;
  assign or_dcpl_1363 = ((fsm_output[33]) & (z_out_5[32])) | (fsm_output[12]);
  assign or_dcpl_1364 = (fsm_output[10]) | (fsm_output[18]);
  assign or_dcpl_1365 = or_dcpl_1364 | (fsm_output[20]);
  assign or_dcpl_1368 = or_dcpl_336 | (fsm_output[9]);
  assign or_dcpl_1371 = (fsm_output[7]) | (fsm_output[6]) | or_dcpl_339;
  assign or_dcpl_1375 = or_dcpl_1317 | (fsm_output[2]);
  assign or_dcpl_1378 = or_dcpl_317 | or_dcpl_1268;
  assign and_dcpl_572 = (fsm_output[27]) & (BUTTERFLY_LOOP_if_1_acc_itm[33]);
  assign and_dcpl_575 = (fsm_output[30]) & (~ (BUTTERFLY_LOOP_if_1_acc_3_itm[33]));
  assign or_dcpl_1535 = or_dcpl_311 | (fsm_output[6]);
  assign or_dcpl_1609 = (fsm_output[17]) | (fsm_output[19]);
  assign or_dcpl_1619 = or_dcpl_736 | (fsm_output[12]);
  assign or_dcpl_1666 = (fsm_output[15]) | (fsm_output[13]);
  assign or_1788_cse = or_dcpl_667 | (fsm_output[13]);
  assign or_dcpl_1776 = (fsm_output[28]) | (fsm_output[25]) | or_dcpl_284;
  assign or_dcpl_1792 = (fsm_output[18]) | (fsm_output[19]);
  assign and_dcpl_669 = ~((fsm_output[32]) | (fsm_output[21]));
  assign or_1935_cse = (fsm_output[25]) | (fsm_output[28]);
  assign mux_187_rmff = MUX_v_13_2_2({(z_out_5[12:0]) , (iDistCnt_sva_6[12:0])},
      and_599_cse);
  assign mux_188_rmff = MUX_v_13_2_2({(iDistCnt_sva[12:0]) , (iDistCnt_sva_2[12:0])},
      and_599_cse | ((~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[3]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[4])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[5]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[6])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[7]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[8])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[9]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[10])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[11]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[12])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[13]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[14])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[15]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[16])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[17]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[18])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[19]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[20])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[21]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[22])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[23]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[24])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[25]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[26])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[27]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[28])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[29]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[30])))
      & (~((MAIN_LOOP_slc_veciTablePuncPat_cse_sva[31]) | (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[2])))
      & (MAIN_LOOP_slc_veciTablePuncPat_cse_sva[1]) & (fsm_output[23])));
  assign vecNewDistance_rTow0_rsc_dualport_addr_core = {mux_187_rmff , mux_188_rmff};
  assign vecNewDistance_rTow0_rsc_dualport_re_core_sct = vecNewDistance_rTow0_rsc_dualport_re_core_sct_reg;
  assign vecNewDistance_rTow1_rsc_dualport_addr_core = {mux_187_rmff , mux_188_rmff};
  assign vecNewDistance_rTow1_rsc_dualport_re_core_sct = vecNewDistance_rTow1_rsc_dualport_re_core_sct_reg;
  assign vecOutputBits_rsc_dualport_data_in_core = {15'b0 , (matdecDecisions_rsc_dualport_data_out[0])};
  assign vecOutputBits_rsc_dualport_addr_core = {13'b0 , UPDATE_MATRIX_LOOP_acc_5_itm};
  assign vecOutputBits_rsc_dualport_we_core_sct = vecOutputBits_rsc_dualport_we_core_sct_reg;
  assign or_1955_cse = ((fsm_output[27]) & (~ (BUTTERFLY_LOOP_if_1_acc_itm[33])))
      | ((fsm_output[30]) & (BUTTERFLY_LOOP_if_1_acc_3_itm[33]));
  assign mux1h_15_nl = MUX1HOT_v_32_3_2({BUTTERFLY_LOOP_rFiStAccMetricPrev0_sva ,
      reg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse , BUTTERFLY_LOOP_rSecStAccMetricPrev1_sva},
      {and_dcpl_572 , or_1955_cse , and_dcpl_575});
  assign vecTrelMetric1_rsc_dualport_data_in = {32'b0 , (mux1h_15_nl)};
  assign mux_207_nl = MUX_v_4_2_2({(MAIN_LOOP_cnt_1_sva_2[4:1]) , (MAIN_LOOP_cnt_1_sva_2[3:0])},
      or_1929_cse);
  assign vecTrelMetric1_rsc_dualport_addr = {(fsm_output[25]) , MAIN_LOOP_cnt_1_sva_2
      , ((MAIN_LOOP_cnt_1_sva_2[4]) & (~ or_dcpl_1291) & (~((fsm_output[25]) | (fsm_output[28]))))
      , ((mux_207_nl) & (signext_4_1(~ or_dcpl_1291))) , (((MAIN_LOOP_cnt_1_sva_2[0])
      & (~ or_dcpl_1291) & (~ (fsm_output[27]))) | (fsm_output[30]))};
  assign vecTrelMetric1_rsc_dualport_re = ({(~((fsm_output[25]) & (~ pOldTrelMetric_2_sva)))
      , 1'b0}) | (signext_2_1(or_dcpl_1220 | or_dcpl_1217 | or_dcpl_1378 | or_dcpl_1375
      | or_dcpl_1371 | or_dcpl_1368 | or_dcpl_1365 | or_dcpl_1363 | or_dcpl_1359
      | or_dcpl_1356 | or_dcpl_1353 | or_dcpl_1351 | or_dcpl_1347 | or_dcpl_1345
      | or_dcpl_1342 | or_dcpl_1283 | pOldTrelMetric_2_sva));
  assign vecTrelMetric1_rsc_dualport_we = {1'b1 , (~ and_dcpl_558)};
  assign mux1h_12_nl = MUX1HOT_v_32_4_2({32'b10011100010000 , BUTTERFLY_LOOP_rFiStAccMetricPrev0_sva
      , reg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse , BUTTERFLY_LOOP_rSecStAccMetricPrev1_sva},
      {(fsm_output[17]) , and_dcpl_572 , or_1955_cse , and_dcpl_575});
  assign vecTrelMetric2_rsc_dualport_data_in = {32'b0 , ((mux1h_12_nl) & (signext_32_1(~
      (fsm_output[15]))))};
  assign nor_233_cse = ~((fsm_output[15]) | or_dcpl_1291);
  assign mux_208_nl = MUX_s_1_2_2({(i_12_sva_2[5]) , (MAIN_LOOP_cnt_1_sva_2[4])},
      or_1929_cse);
  assign mux1h_51_nl = MUX1HOT_v_4_3_2({(i_12_sva_2[4:1]) , (MAIN_LOOP_cnt_1_sva_2[4:1])
      , (MAIN_LOOP_cnt_1_sva_2[3:0])}, {(fsm_output[17]) , or_1935_cse , or_1929_cse});
  assign mux_209_nl = MUX_s_1_2_2({(i_12_sva_2[0]) , (MAIN_LOOP_cnt_1_sva_2[0])},
      or_1935_cse);
  assign vecTrelMetric2_rsc_dualport_addr = {(~ (fsm_output[25])) , MAIN_LOOP_cnt_1_sva_2
      , (((mux_208_nl) & nor_233_cse & (~ (fsm_output[28]))) | (fsm_output[25]))
      , ((mux1h_51_nl) & ({{3{nor_233_cse}}, nor_233_cse})) , (((mux_209_nl) & nor_233_cse
      & (~ (fsm_output[27]))) | (fsm_output[30]))};
  assign vecTrelMetric2_rsc_dualport_re = ({(~((fsm_output[25]) & pOldTrelMetric_2_sva))
      , 1'b0}) | (signext_2_1(or_dcpl_1220 | or_dcpl_1217 | or_dcpl_1378 | or_dcpl_1375
      | or_dcpl_1371 | or_dcpl_1368 | or_dcpl_1365 | or_dcpl_1363 | or_dcpl_1359
      | or_dcpl_1356 | or_dcpl_1353 | or_dcpl_1351 | or_dcpl_1347 | or_dcpl_1345
      | or_dcpl_1342 | or_dcpl_1283 | (~ pOldTrelMetric_2_sva)));
  assign vecTrelMetric2_rsc_dualport_we = {1'b1 , ((((~(mux_tmp_1 | exit_for_8_sva))
      | ((~ exit_for_4_sva) & (for_4_acc_itm[2]))) & (fsm_output[15])) | and_dcpl_558
      | or_dcpl_1275 | or_dcpl_1272 | (fsm_output[43]) | (fsm_output[44]) | or_dcpl_317
      | or_dcpl_1268 | or_dcpl_1317 | or_dcpl_1208 | or_dcpl_1205 | or_dcpl_305 |
      or_dcpl_736 | or_dcpl_667 | or_dcpl_1195 | and_dcpl_557 | (fsm_output[24])
      | (fsm_output[19]) | or_dcpl_816 | (fsm_output[31]) | (fsm_output[32]) | or_dcpl_1291
      | or_dcpl_1290 | or_dcpl_286 | (fsm_output[25]) | (fsm_output[13]) | or_dcpl_1175
      | or_dcpl_1283)};
  assign for_5_mux1h_1_nl = MUX1HOT_v_4_3_2({({2'b0 , for_5_else_else_mux_itm}) ,
      for_5_else_if_mux_itm , for_5_if_mux_itm}, {for_5_nor_cse , for_5_and_2_cse
      , for_5_slc_1_svs});
  assign veciTablePuncPat_rsc_dualport_data_in = {60'b0 , ((for_5_mux1h_1_nl) & (signext_4_1(fsm_output[19])))};
  assign mux1h_8_nl = MUX1HOT_v_13_3_2({(i_1_sva[12:0]) , (i_6_sva[12:0]) , ((z_out_6[12:0])
      & (signext_13_1(fsm_output[32])))}, {(fsm_output[11]) , (fsm_output[19]) ,
      ((fsm_output[32]) | (fsm_output[21]))});
  assign veciTablePuncPat_rsc_dualport_addr = {13'b0 , (mux1h_8_nl)};
  assign veciTablePuncPat_rsc_dualport_re = {1'b1 , (~(((fsm_output[32]) & (MAIN_LOOP_acc_4_itm[33]))
      | ((fsm_output[21]) & (z_out_5[32]))))};
  assign veciTablePuncPat_rsc_dualport_we = {1'b1 , (~((and_dcpl_553 & (~ exit_for_8_sva)
      & (fsm_output[11])) | ((~(exit_for_5_sva | exit_for_5_sva_1)) & (fsm_output[19]))))};
  assign mux_182_nl = MUX_s_1_2_2({(BUTTERFLY_LOOP_if_1_acc_itm[33]) , (BUTTERFLY_LOOP_if_1_acc_3_itm[33])},
      fsm_output[30]);
  assign matdecDecisions_rsc_dualport_data_in = {1'b0 , (~((mux_182_nl) | (fsm_output[13])))};
  assign mux1h_6_nl = MUX1HOT_v_13_3_2({(i_2_sva[12:0]) , (i_8_sva[12:0]) , (({(acc_3_psp_sva[11:0])
      , (iNumOutBits_sva[0])}) + (~ (i_sva[12:0])))}, {(fsm_output[13]) , or_1929_cse
      , (fsm_output[34])});
  assign mux1h_45_nl = MUX1HOT_s_1_3_2({(j_1_sva_2[5]) , (MAIN_LOOP_cnt_1_sva_2[4])
      , iCurDecState_sg5_1_sva}, {(fsm_output[13]) , or_1929_cse , (fsm_output[34])});
  assign mux1h_46_nl = MUX1HOT_s_1_3_2({(j_1_sva_2[4]) , (MAIN_LOOP_cnt_1_sva_2[3])
      , iCurDecState_sg3_sva}, {(fsm_output[13]) , or_1929_cse , (fsm_output[34])});
  assign mux1h_47_nl = MUX1HOT_s_1_3_2({(j_1_sva_2[3]) , (MAIN_LOOP_cnt_1_sva_2[2])
      , iCurDecState_sg2_sva}, {(fsm_output[13]) , or_1929_cse , (fsm_output[34])});
  assign mux1h_48_nl = MUX1HOT_s_1_3_2({(j_1_sva_2[2]) , (MAIN_LOOP_cnt_1_sva_2[1])
      , iCurDecState_sg1_sva}, {(fsm_output[13]) , or_1929_cse , (fsm_output[34])});
  assign mux1h_49_nl = MUX1HOT_s_1_3_2({(j_1_sva_2[1]) , (MAIN_LOOP_cnt_1_sva_2[0])
      , iCurDecState_1_sva}, {(fsm_output[13]) , or_1929_cse , (fsm_output[34])});
  assign mux_181_nl = MUX_s_1_2_2({(j_1_sva_2[0]) , UPDATE_MATRIX_LOOP_decCurBit_asn_6_itm},
      fsm_output[34]);
  assign matdecDecisions_rsc_dualport_addr = {19'b0 , (mux1h_6_nl) , (mux1h_45_nl)
      , (mux1h_46_nl) , (mux1h_47_nl) , (mux1h_48_nl) , (mux1h_49_nl) , (((mux_181_nl)
      & (~ (fsm_output[27]))) | (fsm_output[30]))};
  assign matdecDecisions_rsc_dualport_re = {1'b1 , (~ (fsm_output[34]))};
  assign matdecDecisions_rsc_dualport_we = {1'b1 , (~ or_dcpl_1178)};
  assign xfor_3_acc_4_sdt = (({(iPunctPatPartB_2_sva[4:0]) , 2'b1}) + conv_u2u_3_7(i_10_sva[3:1]))
      + iPunctPatPartB_2_sva;
  assign for_3_acc_4_sdt = xfor_3_acc_4_sdt[6:0];
  assign xfor_2_acc_4_sdt = (({(iPunctPatPartA_2_sva[4:0]) , 2'b1}) + conv_u2u_3_7(i_9_sva[3:1]))
      + iPunctPatPartA_2_sva;
  assign for_2_acc_4_sdt = xfor_2_acc_4_sdt[6:0];
  always @(posedge clk) begin
    if ( rst ) begin
      veciTailBitPat_4_1_sva_dfm <= 2'b0;
      veciTailBitPat_0_1_sva_dfm <= 2'b0;
      veciTailBitPat_5_1_sva_dfm <= 2'b0;
      veciTailBitPat_1_1_sva_dfm <= 2'b0;
      i_11_sva <= 3'b0;
      veciTailBitPat_3_1_sva_dfm <= 2'b0;
      veciTailBitPat_2_1_sva_dfm <= 2'b0;
      veciPuncPatPartB_15_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_14_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_13_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_12_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_11_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_10_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_9_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_8_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_7_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_6_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_5_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_4_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_3_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_2_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_1_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartB_0_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_15_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_14_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_13_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_12_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_11_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_10_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_9_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_8_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_7_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_6_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_5_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_4_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_3_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_2_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_1_1_sva_dfm_3 <= 4'b0;
      veciPuncPatPartA_0_1_sva_dfm_3 <= 4'b0;
      i_10_sva <= 5'b0;
      i_9_sva <= 5'b0;
      InitDecode_return_rsc_mgc_out_stdreg_d <= 32'b0;
      reg_vecOutputBits_rsc_dualport_we_core_psct_1_cse <= 1'b0;
      reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_1_cse <= 1'b0;
      reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_sg1_cse <= 1'b0;
      reg_eNewCodingScheme_triosy_mgc_io_sync_iswt0_cse <= 1'b0;
      reg_InitDecode_return_triosy_mgc_io_sync_iswt0_cse <= 1'b0;
      reg_start_sync_mgc_bsync_rv_iswt0_cse <= 1'b0;
      div_mgc_div_1_b <= 4'b0;
      div_mgc_div_1_a <= 32'b0;
      div_mgc_div_b <= 32'b0;
      div_mgc_div_a <= 32'b0;
      if_slc_iPuncturingPatterns_psp_sva <= 4'b0;
      iTailbitParamL0_lpi_dfm_1 <= 1'b0;
      if_conc_2_mut <= 32'b0;
      iPunctPatPartB_2_sva <= 7'b0;
      else_slc_iPuncturingPatterns_psp_sva <= 4'b0;
      iTailbitParamL1_1_lpi_dfm <= 1'b0;
      else_conc_2_mut <= 32'b0;
      or_psp <= 1'b0;
      iNumOutBits_sva <= 32'b0;
      acc_3_psp_sva <= 31'b0;
      iNewNumOutBitsPartA_1_sva <= 32'b0;
      slc_iPuncturingPatterns_1_psp_sva <= 4'b0;
      slc_iPuncturingPatterns_psp_sva <= 4'b0;
      iPunctPatPartA_2_sva <= 7'b0;
      io_read_iLevel_rsc_d_svs <= 32'b0;
      iTailbitPattern_2_sva <= 6'b0;
      iTailbitPattern_2_sva_1 <= 6'b0;
      eNewChannelType_1_sva <= 32'b0;
      exit_for_3_sva <= 1'b0;
      exit_for_2_sva <= 1'b0;
      i_2_sva <= 32'b0;
      i_1_sva <= 32'b0;
      exit_for_1_sva <= 1'b0;
      exit_for_sva <= 1'b0;
      exit_for_6_sva <= 1'b0;
      exit_for_7_sva <= 1'b0;
      exit_for_8_sva <= 1'b0;
      exit_for_4_sva <= 1'b0;
      exit_for_sva_1 <= 1'b0;
      j_1_sva_2 <= 6'b0;
      exit_for_1_sva_1 <= 1'b0;
      for_mux_80_itm <= 1'b0;
      for_mux_79_itm <= 1'b0;
      for_and_49_itm <= 1'b0;
      for_mux_itm <= 32'b0;
      for_and_11_itm <= 1'b0;
      for_and_10_itm <= 1'b0;
      for_and_9_itm <= 1'b0;
      for_nor_1_itm <= 1'b0;
      for_and_7_itm <= 1'b0;
      for_and_6_itm <= 1'b0;
      j_1_sva_1 <= 7'b0;
      pCurTrelMetric_2_sva <= 1'b0;
      i_12_sva_2 <= 6'b0;
      pOldTrelMetric_2_sva <= 1'b0;
      iPunctCounter_sva <= 32'b0;
      i_6_sva <= 32'b0;
      exit_for_5_sva <= 1'b0;
      exit_INIT_TRELLIS_LOOP_sva <= 1'b0;
      exit_for_5_sva_dfm <= 1'b0;
      for_5_else_oelse_and_itm <= 1'b0;
      for_5_if_mux_itm <= 4'b0;
      for_5_slc_1_svs <= 1'b0;
      exit_for_5_sva_1 <= 1'b0;
      exit_INIT_TRELLIS_LOOP_sva_dfm <= 1'b0;
      for_5_mux_8_itm <= 32'b0;
      for_5_or_itm <= 1'b0;
      for_5_mux_12_itm_1 <= 6'b0;
      for_5_else_lor_lpi_1_dfm <= 1'b0;
      for_5_else_else_mux_itm <= 2'b0;
      for_5_else_if_mux_itm <= 4'b0;
      iPunctCounter_sva_dfm_1 <= 32'b0;
      iPunctCounter_sva_dfm_3 <= 32'b0;
      for_5_if_and_1_itm <= 32'b0;
      for_5_mux_itm <= 32'b0;
      iDistCnt_sva <= 32'b0;
      i_sva <= 32'b0;
      iCurDecState_sg5_1_sva <= 1'b0;
      iCurDecState_1_sva <= 1'b0;
      iCurDecState_sg1_sva <= 1'b0;
      iCurDecState_sg2_sva <= 1'b0;
      iCurDecState_sg3_sva <= 1'b0;
      iCurDecState_sg4_sva <= 1'b0;
      MAIN_LOOP_cnt_1_sva_2 <= 5'b0;
      i_8_sva <= 32'b0;
      unequal_tmp_2 <= 1'b0;
      nor_dfs_1 <= 1'b0;
      equal_tmp_1 <= 1'b0;
      nor_tmp_4 <= 1'b0;
      iDistCnt_sva_2 <= 32'b0;
      MAIN_LOOP_slc_veciTablePuncPat_cse_sva <= 32'b0;
      iDistCnt_sva_1 <= 32'b0;
      unequal_tmp_1 <= 1'b0;
      MAIN_LOOP_else_or_itm <= 1'b0;
      iDistCnt_sva_4 <= 32'b0;
      iDistCnt_sva_3 <= 32'b0;
      MAIN_LOOP_else_rIRxx11_acc_2_psp_sva <= 9'b0;
      MAIN_LOOP_else_rIRxx01_acc_2_psp_sva <= 9'b0;
      MAIN_LOOP_else_rIRxx10_acc_2_psp_sva <= 9'b0;
      MAIN_LOOP_else_rIRxx00_acc_2_psp_sva <= 9'b0;
      MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva <= 8'b0;
      MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva <= 8'b0;
      vecrMetricSet_0_1_lpi_1_dfm_2 <= 10'b0;
      vecrMetricSet_2_1_lpi_1_dfm_2 <= 10'b0;
      vecrMetricSet_4_1_lpi_1_dfm_2 <= 10'b0;
      vecrMetricSet_6_1_lpi_1_dfm_2 <= 10'b0;
      vecrMetricSet_9_1_lpi_1_dfm_2 <= 10'b0;
      vecrMetricSet_11_1_lpi_1_dfm_2 <= 10'b0;
      vecrMetricSet_13_1_lpi_1_dfm_2 <= 10'b0;
      vecrMetricSet_15_1_lpi_1_dfm_2 <= 10'b0;
      MAIN_LOOP_cnt_1_sva_1 <= 6'b0;
      BUTTERFLY_LOOP_rFiStAccMetricPrev1_slc_vecrMetricSet_1_cse_sva <= 32'b0;
      BUTTERFLY_LOOP_rFiStAccMetricPrev0_slc_vecrMetricSet_1_cse_sva <= 32'b0;
      BUTTERFLY_LOOP_rFiStAccMetricPrev0_sva <= 32'b0;
      reg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse <= 32'b0;
      BUTTERFLY_LOOP_rSecStAccMetricPrev1_sva <= 32'b0;
      MAIN_LOOP_and_12_itm <= 1'b0;
      MAIN_LOOP_else_and_3_itm <= 1'b0;
      MAIN_LOOP_else_and_4_itm <= 1'b0;
      exit_UPDATE_MATRIX_LOOP_sva <= 1'b0;
      UPDATE_MATRIX_LOOP_decCurBit_asn_6_itm <= 1'b0;
      UPDATE_MATRIX_LOOP_acc_5_itm <= 13'b0;
      retValue_mux_mut <= 32'b0;
      reg_if_acc_3_psp_sva_tmp_26 <= 4'b0;
      reg_iTailbitParamL0_lpi_dfm_sg1_tmp_30 <= 1'b0;
      reg_else_acc_3_psp_sva_tmp_26 <= 4'b0;
      reg_iTailbitParamL1_sg1_lpi_dfm_tmp_30 <= 1'b0;
    end
    else if ( core_wen ) begin
      veciTailBitPat_4_1_sva_dfm <= MUX_v_2_2_2({veciTailBitPat_4_1_sva_dfm , for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva},
          for_and_10_itm & (fsm_output[15]));
      veciTailBitPat_0_1_sva_dfm <= MUX_v_2_2_2({veciTailBitPat_0_1_sva_dfm , for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva},
          for_and_6_itm & (fsm_output[15]));
      veciTailBitPat_5_1_sva_dfm <= MUX_v_2_2_2({veciTailBitPat_5_1_sva_dfm , for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva},
          for_and_11_itm & (fsm_output[15]));
      veciTailBitPat_1_1_sva_dfm <= MUX_v_2_2_2({veciTailBitPat_1_1_sva_dfm , for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva},
          for_and_7_itm & (fsm_output[15]));
      i_11_sva <= (MUX_v_3_2_2({i_11_sva_1 , i_11_sva}, exit_for_4_sva | and_dcpl_444))
          & (signext_3_1(~ (fsm_output[10])));
      veciTailBitPat_3_1_sva_dfm <= MUX_v_2_2_2({veciTailBitPat_3_1_sva_dfm , for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva},
          for_and_9_itm & (fsm_output[15]));
      veciTailBitPat_2_1_sva_dfm <= MUX_v_2_2_2({veciTailBitPat_2_1_sva_dfm , for_4_read_rom_iPunctPatTailbits_rom_map_1_psp_sva},
          for_nor_1_itm & (fsm_output[15]));
      veciPuncPatPartB_15_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_15_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_883 | or_dcpl_882);
      veciPuncPatPartB_14_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_14_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_883 | or_dcpl_890);
      veciPuncPatPartB_13_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_13_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_883 | or_dcpl_898);
      veciPuncPatPartB_12_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_12_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_883 | or_dcpl_906);
      veciPuncPatPartB_11_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_11_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_915 | or_dcpl_882);
      veciPuncPatPartB_10_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_10_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_915 | or_dcpl_890);
      veciPuncPatPartB_9_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_9_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_915 | or_dcpl_898);
      veciPuncPatPartB_8_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_8_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_915 | or_dcpl_906);
      veciPuncPatPartB_7_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_7_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_947 | or_dcpl_882);
      veciPuncPatPartB_6_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_6_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_947 | or_dcpl_890);
      veciPuncPatPartB_5_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_5_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_947 | or_dcpl_898);
      veciPuncPatPartB_4_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_4_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_947 | or_dcpl_906);
      veciPuncPatPartB_3_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_3_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_979 | or_dcpl_882);
      veciPuncPatPartB_2_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_2_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_979 | or_dcpl_890);
      veciPuncPatPartB_1_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_1_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_979 | or_dcpl_898);
      veciPuncPatPartB_0_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out , veciPuncPatPartB_0_1_sva_dfm_3},
          or_dcpl_887 | or_dcpl_885 | or_dcpl_979 | or_dcpl_906);
      veciPuncPatPartA_15_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_15_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1011 | or_dcpl_1010);
      veciPuncPatPartA_14_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_14_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1011 | or_dcpl_1018);
      veciPuncPatPartA_13_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_13_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1011 | or_dcpl_1026);
      veciPuncPatPartA_12_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_12_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1011 | or_dcpl_1034);
      veciPuncPatPartA_11_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_11_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1043 | or_dcpl_1010);
      veciPuncPatPartA_10_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_10_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1043 | or_dcpl_1018);
      veciPuncPatPartA_9_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_9_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1043 | or_dcpl_1026);
      veciPuncPatPartA_8_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_8_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1043 | or_dcpl_1034);
      veciPuncPatPartA_7_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_7_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1075 | or_dcpl_1010);
      veciPuncPatPartA_6_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_6_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1075 | or_dcpl_1018);
      veciPuncPatPartA_5_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_5_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1075 | or_dcpl_1026);
      veciPuncPatPartA_4_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_4_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1075 | or_dcpl_1034);
      veciPuncPatPartA_3_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_3_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1107 | or_dcpl_1010);
      veciPuncPatPartA_2_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_2_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1107 | or_dcpl_1018);
      veciPuncPatPartA_1_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_1_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1107 | or_dcpl_1026);
      veciPuncPatPartA_0_1_sva_dfm_3 <= MUX_v_4_2_2({data_out_out_1 , veciPuncPatPartA_0_1_sva_dfm_3},
          or_dcpl_1015 | or_dcpl_885 | or_dcpl_1107 | or_dcpl_1034);
      i_10_sva <= (MUX_v_5_2_2({(conv_u2s_4_5(i_10_sva[3:0]) + 5'b1) , i_10_sva},
          or_dcpl_886 | (~ (for_3_acc_5_itm[6])) | exit_for_8_sva | and_dcpl_444))
          & (signext_5_1(~ (fsm_output[10])));
      i_9_sva <= (MUX_v_5_2_2({(conv_u2s_4_5(i_9_sva[3:0]) + 5'b1) , i_9_sva}, or_dcpl_1014
          | (~ (for_2_acc_5_itm[6])) | exit_for_8_sva | and_dcpl_444)) & (signext_5_1(~
          (fsm_output[10])));
      InitDecode_return_rsc_mgc_out_stdreg_d <= MUX_v_32_2_2({InitDecode_return_rsc_mgc_out_stdreg_d
          , div_mgc_div_z_oreg}, fsm_output[50]);
      reg_vecOutputBits_rsc_dualport_we_core_psct_1_cse <= fsm_output[35];
      reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_1_cse <= or_1192_rmff;
      reg_vecNewDistance_rTow1_rsc_dualport_re_core_psct_sg1_cse <= mux_160_rmff;
      reg_eNewCodingScheme_triosy_mgc_io_sync_iswt0_cse <= ((fsm_output[33]) & (~
          (z_out_5[32]))) | ((fsm_output[36]) & exit_UPDATE_MATRIX_LOOP_sva);
      reg_InitDecode_return_triosy_mgc_io_sync_iswt0_cse <= fsm_output[50];
      reg_start_sync_mgc_bsync_rv_iswt0_cse <= ~(or_dcpl_1220 | or_dcpl_1217 | or_dcpl_317
          | (fsm_output[47]) | (fsm_output[48]) | (fsm_output[49]) | (fsm_output[51])
          | or_dcpl_1208 | or_dcpl_1205 | or_dcpl_305 | (fsm_output[18]) | or_dcpl_1200
          | or_dcpl_1195 | (fsm_output[24]) | (fsm_output[17]) | (fsm_output[19])
          | or_dcpl_816 | (fsm_output[31]) | or_dcpl_1186 | (fsm_output[33]) | (fsm_output[36])
          | (fsm_output[21]) | (fsm_output[1]) | or_dcpl_286 | (fsm_output[25]) |
          or_dcpl_1178 | or_dcpl_1175 | (fsm_output[35]));
      div_mgc_div_1_b <= MUX1HOT_v_4_3_2({if_slc_iPuncturingPatterns_psp_sva_1 ,
          if_slc_iPuncturingPatterns_psp_sva , else_slc_iPuncturingPatterns_psp_sva},
          {(fsm_output[1]) , and_492_cse , and_tmp_5});
      div_mgc_div_1_a <= MUX1HOT_v_32_4_2({({if_acc_3_psp_sva , (iTailbitParamL0_lpi_dfm_sg1[0])
          , iTailbitParamL0_lpi_dfm_2}) , ({else_acc_3_psp_sva , (iTailbitParamL1_sg1_lpi_dfm_mx0[0])
          , iTailbitParamL1_1_lpi_dfm_1}) , if_conc_2_mut , else_conc_2_mut}, {((~((iLevel_rsc_mgc_in_wire_d[31])
          | (iLevel_rsc_mgc_in_wire_d[30]) | (iLevel_rsc_mgc_in_wire_d[29]))) & (~((iLevel_rsc_mgc_in_wire_d[28])
          | (iLevel_rsc_mgc_in_wire_d[27]))) & (~((iLevel_rsc_mgc_in_wire_d[26])
          | (iLevel_rsc_mgc_in_wire_d[25]))) & (~((iLevel_rsc_mgc_in_wire_d[24])
          | (iLevel_rsc_mgc_in_wire_d[23]))) & (~((iLevel_rsc_mgc_in_wire_d[22])
          | (iLevel_rsc_mgc_in_wire_d[21]))) & (~((iLevel_rsc_mgc_in_wire_d[20])
          | (iLevel_rsc_mgc_in_wire_d[19]))) & (~((iLevel_rsc_mgc_in_wire_d[18])
          | (iLevel_rsc_mgc_in_wire_d[17]))) & (~((iLevel_rsc_mgc_in_wire_d[16])
          | (iLevel_rsc_mgc_in_wire_d[15]))) & (~((iLevel_rsc_mgc_in_wire_d[14])
          | (iLevel_rsc_mgc_in_wire_d[13]))) & (~((iLevel_rsc_mgc_in_wire_d[12])
          | (iLevel_rsc_mgc_in_wire_d[11]))) & (~((iLevel_rsc_mgc_in_wire_d[10])
          | (iLevel_rsc_mgc_in_wire_d[9]))) & (~((iLevel_rsc_mgc_in_wire_d[8]) |
          (iLevel_rsc_mgc_in_wire_d[7]))) & (~((iLevel_rsc_mgc_in_wire_d[6]) | (iLevel_rsc_mgc_in_wire_d[5])))
          & (~((iLevel_rsc_mgc_in_wire_d[4]) | (iLevel_rsc_mgc_in_wire_d[3]))) &
          (~((iLevel_rsc_mgc_in_wire_d[2]) | (iLevel_rsc_mgc_in_wire_d[1]))) & (~
          (iLevel_rsc_mgc_in_wire_d[0])) & (fsm_output[1])) , (((iLevel_rsc_mgc_in_wire_d[31])
          | (iLevel_rsc_mgc_in_wire_d[30]) | (iLevel_rsc_mgc_in_wire_d[29]) | (iLevel_rsc_mgc_in_wire_d[28])
          | (iLevel_rsc_mgc_in_wire_d[27]) | (iLevel_rsc_mgc_in_wire_d[26]) | (iLevel_rsc_mgc_in_wire_d[25])
          | (iLevel_rsc_mgc_in_wire_d[24]) | (iLevel_rsc_mgc_in_wire_d[23]) | (iLevel_rsc_mgc_in_wire_d[22])
          | (iLevel_rsc_mgc_in_wire_d[21]) | (iLevel_rsc_mgc_in_wire_d[20]) | (iLevel_rsc_mgc_in_wire_d[19])
          | (iLevel_rsc_mgc_in_wire_d[18]) | (iLevel_rsc_mgc_in_wire_d[17]) | (iLevel_rsc_mgc_in_wire_d[16])
          | (iLevel_rsc_mgc_in_wire_d[15]) | (iLevel_rsc_mgc_in_wire_d[14]) | (iLevel_rsc_mgc_in_wire_d[13])
          | (iLevel_rsc_mgc_in_wire_d[12]) | (iLevel_rsc_mgc_in_wire_d[11]) | (iLevel_rsc_mgc_in_wire_d[10])
          | (iLevel_rsc_mgc_in_wire_d[9]) | (iLevel_rsc_mgc_in_wire_d[8]) | (iLevel_rsc_mgc_in_wire_d[7])
          | (iLevel_rsc_mgc_in_wire_d[6]) | (iLevel_rsc_mgc_in_wire_d[5]) | (iLevel_rsc_mgc_in_wire_d[4])
          | (iLevel_rsc_mgc_in_wire_d[3]) | (iLevel_rsc_mgc_in_wire_d[2]) | (iLevel_rsc_mgc_in_wire_d[1])
          | (iLevel_rsc_mgc_in_wire_d[0])) & (fsm_output[1])) , and_492_cse , and_tmp_5});
      div_mgc_div_b <= iDistCnt_sva;
      div_mgc_div_a <= MUX1HOT_v_32_3_2({(vecTrelMetric1_rsc_dualport_data_out[31:0])
          , (vecTrelMetric2_rsc_dualport_data_out[31:0]) , retValue_mux_mut}, {and_dcpl_547
          , and_dcpl_548 , (or_dcpl_1275 | or_dcpl_1272 | (fsm_output[43]) | (fsm_output[44])
          | (fsm_output[45]) | (fsm_output[46]) | or_dcpl_1268)});
      if_slc_iPuncturingPatterns_psp_sva <= MUX_v_4_2_2({if_slc_iPuncturingPatterns_psp_sva_1
          , if_slc_iPuncturingPatterns_psp_sva}, or_1535_cse);
      iTailbitParamL0_lpi_dfm_1 <= MUX_s_1_2_2({iTailbitParamL0_lpi_dfm_2 , iTailbitParamL0_lpi_dfm_1},
          or_1535_cse);
      if_conc_2_mut <= MUX_v_32_2_2({({if_acc_3_psp_sva , (iTailbitParamL0_lpi_dfm_sg1[0])
          , iTailbitParamL0_lpi_dfm_2}) , if_conc_2_mut}, or_1561_cse);
      iPunctPatPartB_2_sva <= MUX_v_7_2_2({(iPunctPatPartB_rsc_mgc_in_wire_d[6:0])
          , iPunctPatPartB_2_sva}, or_1574_cse);
      else_slc_iPuncturingPatterns_psp_sva <= MUX_v_4_2_2({if_slc_iPuncturingPatterns_psp_sva_1
          , else_slc_iPuncturingPatterns_psp_sva}, or_1535_cse);
      iTailbitParamL1_1_lpi_dfm <= MUX_s_1_2_2({iTailbitParamL1_1_lpi_dfm_1 , iTailbitParamL1_1_lpi_dfm},
          or_1535_cse);
      else_conc_2_mut <= MUX_v_32_2_2({({else_acc_3_psp_sva , (iTailbitParamL1_sg1_lpi_dfm_mx0[0])
          , iTailbitParamL1_1_lpi_dfm_1}) , else_conc_2_mut}, or_1561_cse);
      or_psp <= MUX_s_1_2_2({((iLevel_rsc_mgc_in_wire_d[31]) | (iLevel_rsc_mgc_in_wire_d[30])
          | (iLevel_rsc_mgc_in_wire_d[29]) | (iLevel_rsc_mgc_in_wire_d[28]) | (iLevel_rsc_mgc_in_wire_d[27])
          | (iLevel_rsc_mgc_in_wire_d[26]) | (iLevel_rsc_mgc_in_wire_d[25]) | (iLevel_rsc_mgc_in_wire_d[24])
          | (iLevel_rsc_mgc_in_wire_d[23]) | (iLevel_rsc_mgc_in_wire_d[22]) | (iLevel_rsc_mgc_in_wire_d[21])
          | (iLevel_rsc_mgc_in_wire_d[20]) | (iLevel_rsc_mgc_in_wire_d[19]) | (iLevel_rsc_mgc_in_wire_d[18])
          | (iLevel_rsc_mgc_in_wire_d[17]) | (iLevel_rsc_mgc_in_wire_d[16]) | (iLevel_rsc_mgc_in_wire_d[15])
          | (iLevel_rsc_mgc_in_wire_d[14]) | (iLevel_rsc_mgc_in_wire_d[13]) | (iLevel_rsc_mgc_in_wire_d[12])
          | (iLevel_rsc_mgc_in_wire_d[11]) | (iLevel_rsc_mgc_in_wire_d[10]) | (iLevel_rsc_mgc_in_wire_d[9])
          | (iLevel_rsc_mgc_in_wire_d[8]) | (iLevel_rsc_mgc_in_wire_d[7]) | (iLevel_rsc_mgc_in_wire_d[6])
          | (iLevel_rsc_mgc_in_wire_d[5]) | (iLevel_rsc_mgc_in_wire_d[4]) | (iLevel_rsc_mgc_in_wire_d[3])
          | (iLevel_rsc_mgc_in_wire_d[2]) | (iLevel_rsc_mgc_in_wire_d[1]) | (iLevel_rsc_mgc_in_wire_d[0]))
          , or_psp}, or_1574_cse);
      iNumOutBits_sva <= MUX_v_32_2_2({iNumOutBits_sva_mx0w0 , iNumOutBits_sva},
          or_1656_cse);
      acc_3_psp_sva <= MUX_v_31_2_2({(z_out[30:0]) , acc_3_psp_sva}, or_1656_cse);
      iNewNumOutBitsPartA_1_sva <= MUX_v_32_2_2({iNewNumOutBitsPartA_rsc_mgc_in_wire_d
          , iNewNumOutBitsPartA_1_sva}, or_1708_cse);
      slc_iPuncturingPatterns_1_psp_sva <= MUX_v_4_2_2({data_out_out , slc_iPuncturingPatterns_1_psp_sva},
          or_1708_cse);
      slc_iPuncturingPatterns_psp_sva <= MUX_v_4_2_2({data_out_out_1 , slc_iPuncturingPatterns_psp_sva},
          or_1708_cse);
      iPunctPatPartA_2_sva <= MUX_v_7_2_2({(iPunctPatPartA_rsc_mgc_in_wire_d[6:0])
          , iPunctPatPartA_2_sva}, or_1574_cse);
      io_read_iLevel_rsc_d_svs <= MUX_v_32_2_2({io_read_iLevel_rsc_d_svs , iLevel_rsc_mgc_in_wire_d},
          fsm_output[1]);
      iTailbitPattern_2_sva <= MUX_v_6_2_2({(readslicef_7_6_1((({reg_if_acc_3_psp_sva_tmp_26
          , reg_iTailbitParamL0_lpi_dfm_sg1_tmp_30 , iTailbitParamL0_lpi_dfm_1 ,
          1'b1}) + ({(~ conv_u2u_12_6(conv_u2u_4_6(if_slc_iPuncturingPatterns_psp_sva)
          * (div_mgc_div_1_z_oreg[5:0]))) , 1'b1})))) , iTailbitPattern_2_sva}, or_1761_cse);
      iTailbitPattern_2_sva_1 <= MUX_v_6_2_2({(readslicef_7_6_1((({reg_else_acc_3_psp_sva_tmp_26
          , reg_iTailbitParamL1_sg1_lpi_dfm_tmp_30 , iTailbitParamL1_1_lpi_dfm ,
          1'b1}) + ({(~ conv_u2u_12_6(conv_u2u_4_6(else_slc_iPuncturingPatterns_psp_sva)
          * (div_mgc_div_1_z_oreg[5:0]))) , 1'b1})))) , iTailbitPattern_2_sva_1},
          or_1761_cse);
      eNewChannelType_1_sva <= MUX_v_32_2_2({eNewChannelType_rsc_mgc_in_wire_d ,
          eNewChannelType_1_sva}, or_dcpl_1619 | or_dcpl_1358 | (fsm_output[16])
          | (fsm_output[17]) | (fsm_output[19]) | or_dcpl_1666);
      exit_for_3_sva <= (MUX_s_1_2_2({(MUX_s_1_2_2({(MUX_s_1_2_2({(MUX_s_1_2_2({(~
          (for_3_acc_5_itm[6])) , exit_for_3_sva}, exit_for_3_sva)) , exit_for_3_sva},
          exit_for_7_sva)) , exit_for_3_sva}, exit_for_8_sva)) , exit_for_3_sva},
          and_dcpl_444)) & (~ (fsm_output[10]));
      exit_for_2_sva <= (MUX_s_1_2_2({(MUX_s_1_2_2({(MUX_s_1_2_2({(MUX_s_1_2_2({(~
          (for_2_acc_5_itm[6])) , exit_for_2_sva}, exit_for_2_sva)) , exit_for_2_sva},
          exit_for_7_sva)) , exit_for_2_sva}, exit_for_8_sva)) , exit_for_2_sva},
          and_dcpl_444)) & (~ (fsm_output[10]));
      i_2_sva <= (MUX_v_32_2_2({i_2_sva , z_out_4}, for_and_49_itm & (fsm_output[15])))
          & (signext_32_1(~ (fsm_output[10])));
      i_1_sva <= for_mux_itm & (signext_32_1(fsm_output[15]));
      exit_for_1_sva <= (MUX_s_1_2_2({exit_for_1_sva , for_mux_80_itm}, fsm_output[15]))
          & (~ (fsm_output[10]));
      exit_for_sva <= (MUX_s_1_2_2({exit_for_sva , for_mux_79_itm}, fsm_output[15]))
          & (~ (fsm_output[10]));
      exit_for_6_sva <= (MUX_s_1_2_2({exit_for_6_sva , exit_for_6_sva_dfm_mx0}, fsm_output[15]))
          & (~ (fsm_output[10]));
      exit_for_7_sva <= (MUX_s_1_2_2({(MUX_s_1_2_2({exit_for_7_sva_dfm_mx0 , exit_for_7_sva},
          exit_for_8_sva)) , exit_for_7_sva}, and_dcpl_444)) & (~ (fsm_output[10]));
      exit_for_8_sva <= (MUX_s_1_2_2({((exit_for_6_sva_dfm_mx0 & exit_for_7_sva_dfm_mx0)
          | exit_for_8_sva) , exit_for_8_sva}, and_dcpl_444)) & (~ (fsm_output[10]));
      exit_for_4_sva <= (MUX_s_1_2_2({((~ (for_4_acc_itm[2])) | exit_for_4_sva) ,
          exit_for_4_sva}, and_dcpl_444)) & (~ (fsm_output[10]));
      exit_for_sva_1 <= MUX_s_1_2_2({(~ (for_acc_2_itm[33])) , exit_for_sva_1}, or_1788_cse);
      j_1_sva_2 <= (j_1_sva_1[5:0]) & (signext_6_1(fsm_output[14]));
      exit_for_1_sva_1 <= MUX_s_1_2_2({(~ (for_1_acc_2_itm[33])) , exit_for_1_sva_1},
          or_1788_cse);
      for_mux_80_itm <= MUX_s_1_2_2({(MUX_s_1_2_2({(MUX_s_1_2_2({(~ (for_1_acc_2_itm[33]))
          , exit_for_1_sva}, exit_for_1_sva)) , exit_for_1_sva}, exit_for_6_sva))
          , for_mux_80_itm}, or_1788_cse);
      for_mux_79_itm <= MUX_s_1_2_2({(MUX_s_1_2_2({(MUX_s_1_2_2({mux_197_cse , exit_for_sva},
          exit_for_sva)) , exit_for_sva}, exit_for_6_sva)) , for_mux_79_itm}, or_1788_cse);
      for_and_49_itm <= MUX_s_1_2_2({((~((~ (for_1_acc_2_itm[33])) | exit_for_1_sva))
          & (~(exit_for_6_sva | exit_for_8_sva))) , for_and_49_itm}, or_1788_cse);
      for_mux_itm <= MUX1HOT_v_32_3_2({i_1_sva , z_out , for_mux_itm}, {(~(and_dcpl_553
          | or_1788_cse)) , (and_dcpl_553 & (~ or_1788_cse)) , or_1788_cse});
      for_and_11_itm <= (i_11_sva[2]) & and_stg_6_sg1_sva & (~ exit_for_4_sva);
      for_and_10_itm <= (i_11_sva[2]) & and_stg_14_sva & (~ exit_for_4_sva);
      for_and_9_itm <= (~ (i_11_sva[2])) & (i_11_sva[1]) & (i_11_sva[0]) & (~ exit_for_4_sva);
      for_nor_1_itm <= ~((i_11_sva[2]) | (~ (i_11_sva[1])) | (i_11_sva[0]) | exit_for_4_sva);
      for_and_7_itm <= (~ (i_11_sva[2])) & and_stg_6_sg1_sva & (~ exit_for_4_sva);
      for_and_6_itm <= (~ (i_11_sva[2])) & and_stg_14_sva & (~ exit_for_4_sva);
      j_1_sva_1 <= z_out_2;
      pCurTrelMetric_2_sva <= (MUX_s_1_2_2({pCurTrelMetric_2_sva , pOldTrelMetric_2_sva},
          and_767_cse)) & (~ (fsm_output[16]));
      i_12_sva_2 <= MUX_v_6_2_2({6'b1 , for_5_mux_12_itm_1}, fsm_output[20]);
      pOldTrelMetric_2_sva <= (MUX_s_1_2_2({pCurTrelMetric_2_sva , pOldTrelMetric_2_sva},
          ~(and_767_cse | (fsm_output[16])))) | (fsm_output[16]);
      iPunctCounter_sva <= (MUX_v_32_2_2({iPunctCounter_sva , for_5_mux_itm}, fsm_output[20]))
          & (signext_32_1(~ (fsm_output[16])));
      i_6_sva <= (MUX_v_32_2_2({i_6_sva , for_5_mux_8_itm}, fsm_output[20])) & (signext_32_1(~
          (fsm_output[16])));
      exit_for_5_sva <= (MUX_s_1_2_2({exit_for_5_sva_dfm , exit_for_5_sva}, ~((fsm_output[20])
          | (fsm_output[16])))) & (~ (fsm_output[16]));
      exit_INIT_TRELLIS_LOOP_sva <= exit_INIT_TRELLIS_LOOP_sva_dfm & (fsm_output[20]);
      exit_for_5_sva_dfm <= (MUX_s_1_2_2({exit_for_5_sva_dfm , (~ (for_5_acc_3_itm[33]))},
          fsm_output[17])) | ((fsm_output[17]) & exit_for_5_sva);
      for_5_else_oelse_and_itm <= (eNewChannelType_1_sva[1]) & (~((eNewChannelType_1_sva[31])
          | (eNewChannelType_1_sva[30]) | (eNewChannelType_1_sva[29]) | (eNewChannelType_1_sva[28])
          | (eNewChannelType_1_sva[27]) | (eNewChannelType_1_sva[26]) | (eNewChannelType_1_sva[25])
          | (eNewChannelType_1_sva[24]) | (eNewChannelType_1_sva[23]) | (eNewChannelType_1_sva[22])
          | (eNewChannelType_1_sva[21]) | (eNewChannelType_1_sva[20]) | (eNewChannelType_1_sva[19])
          | (eNewChannelType_1_sva[18]) | (eNewChannelType_1_sva[17]) | (eNewChannelType_1_sva[16])
          | (eNewChannelType_1_sva[15]) | (eNewChannelType_1_sva[14]) | (eNewChannelType_1_sva[13])
          | (eNewChannelType_1_sva[12]) | (eNewChannelType_1_sva[11]) | (eNewChannelType_1_sva[10])
          | (eNewChannelType_1_sva[9]) | (eNewChannelType_1_sva[8]) | (eNewChannelType_1_sva[7])
          | (eNewChannelType_1_sva[6]) | (eNewChannelType_1_sva[5]) | (eNewChannelType_1_sva[4])
          | (eNewChannelType_1_sva[3]) | (eNewChannelType_1_sva[2]) | (eNewChannelType_1_sva[0])));
      for_5_if_mux_itm <= MUX_v_4_2_2({(MUX_v_4_16_2({veciPuncPatPartA_0_1_sva_dfm_3
          , veciPuncPatPartA_1_1_sva_dfm_3 , veciPuncPatPartA_2_1_sva_dfm_3 , veciPuncPatPartA_3_1_sva_dfm_3
          , veciPuncPatPartA_4_1_sva_dfm_3 , veciPuncPatPartA_5_1_sva_dfm_3 , veciPuncPatPartA_6_1_sva_dfm_3
          , veciPuncPatPartA_7_1_sva_dfm_3 , veciPuncPatPartA_8_1_sva_dfm_3 , veciPuncPatPartA_9_1_sva_dfm_3
          , veciPuncPatPartA_10_1_sva_dfm_3 , veciPuncPatPartA_11_1_sva_dfm_3 , veciPuncPatPartA_12_1_sva_dfm_3
          , veciPuncPatPartA_13_1_sva_dfm_3 , veciPuncPatPartA_14_1_sva_dfm_3 , veciPuncPatPartA_15_1_sva_dfm_3},
          iPunctCounter_sva[3:0])) , for_5_if_mux_itm}, fsm_output[18]);
      for_5_slc_1_svs <= MUX_s_1_2_2({(z_out_1[33]) , for_5_slc_1_svs}, fsm_output[18]);
      exit_for_5_sva_1 <= MUX_s_1_2_2({(~ (for_5_acc_3_itm[33])) , exit_for_5_sva_1},
          fsm_output[18]);
      exit_INIT_TRELLIS_LOOP_sva_dfm <= (MUX_s_1_2_2({exit_INIT_TRELLIS_LOOP_sva_dfm
          , (z_out_2[6])}, fsm_output[17])) | and_dcpl_557;
      for_5_mux_8_itm <= MUX_v_32_2_2({z_out_6 , for_5_mux_8_itm}, or_dcpl_1792);
      for_5_or_itm <= MUX_s_1_2_2({((~ (for_5_acc_3_itm[33])) | exit_for_5_sva) ,
          for_5_or_itm}, fsm_output[18]);
      for_5_mux_12_itm_1 <= MUX_v_6_2_2({((z_out_2[5:0]) & (signext_6_1(~ exit_INIT_TRELLIS_LOOP_sva)))
          , for_5_mux_12_itm_1}, or_dcpl_1792);
      for_5_else_lor_lpi_1_dfm <= for_5_else_oelse_and_itm | (z_out_1[33]);
      for_5_else_else_mux_itm <= MUX_v_2_16_2({veciTailBitPat_0_1_sva_dfm , veciTailBitPat_1_1_sva_dfm
          , veciTailBitPat_2_1_sva_dfm , veciTailBitPat_3_1_sva_dfm , veciTailBitPat_4_1_sva_dfm
          , veciTailBitPat_5_1_sva_dfm , 2'b0 , 2'b0 , 2'b0 , 2'b0 , 2'b0 , 2'b0
          , 2'b0 , 2'b0 , 2'b0 , 2'b0}, iPunctCounter_sva_dfm_7[3:0]);
      for_5_else_if_mux_itm <= MUX_v_4_16_2({veciPuncPatPartB_0_1_sva_dfm_3 , veciPuncPatPartB_1_1_sva_dfm_3
          , veciPuncPatPartB_2_1_sva_dfm_3 , veciPuncPatPartB_3_1_sva_dfm_3 , veciPuncPatPartB_4_1_sva_dfm_3
          , veciPuncPatPartB_5_1_sva_dfm_3 , veciPuncPatPartB_6_1_sva_dfm_3 , veciPuncPatPartB_7_1_sva_dfm_3
          , veciPuncPatPartB_8_1_sva_dfm_3 , veciPuncPatPartB_9_1_sva_dfm_3 , veciPuncPatPartB_10_1_sva_dfm_3
          , veciPuncPatPartB_11_1_sva_dfm_3 , veciPuncPatPartB_12_1_sva_dfm_3 , veciPuncPatPartB_13_1_sva_dfm_3
          , veciPuncPatPartB_14_1_sva_dfm_3 , veciPuncPatPartB_15_1_sva_dfm_3}, iPunctCounter_sva_dfm_6[3:0]);
      iPunctCounter_sva_dfm_1 <= iPunctCounter_sva_dfm_6;
      iPunctCounter_sva_dfm_3 <= iPunctCounter_sva_dfm_7;
      for_5_if_and_1_itm <= z_out_4 & (signext_32_1(~(((z_out_4[3:0]) == slc_iPuncturingPatterns_psp_sva)
          & for_5_if_if_nor_cse)));
      for_5_mux_itm <= MUX1HOT_v_32_4_2({z_out_6 , (z_out_4 & (signext_32_1(~(((z_out_4[3:0])
          == slc_iPuncturingPatterns_1_psp_sva) & for_5_if_if_nor_cse)))) , for_5_if_and_1_itm
          , iPunctCounter_sva}, {(for_5_nor_cse & (~ for_5_or_itm)) , (for_5_and_2_cse
          & (~ for_5_or_itm)) , (for_5_slc_1_svs & (~ for_5_or_itm)) , for_5_or_itm});
      iDistCnt_sva <= (MUX1HOT_v_32_5_2({iDistCnt_sva_1 , iDistCnt_sva_2 , iDistCnt_sva_3
          , iDistCnt_sva_4 , iDistCnt_sva}, {(~(unequal_tmp_1 | and_dcpl_669)) ,
          (MAIN_LOOP_and_12_itm & (~ and_dcpl_669)) , (MAIN_LOOP_else_and_3_itm &
          (~ and_dcpl_669)) , (MAIN_LOOP_else_and_4_itm & (~ and_dcpl_669)) , and_dcpl_669}))
          & (signext_32_1(~ (fsm_output[21])));
      i_sva <= (MUX_v_32_2_2({z_out_4 , i_sva}, (fsm_output[36]) | (fsm_output[35])))
          & (signext_32_1(~ (fsm_output[33])));
      iCurDecState_sg5_1_sva <= (MUX_s_1_2_2({(matdecDecisions_rsc_dualport_data_out[0])
          , iCurDecState_sg5_1_sva}, fsm_output[36])) & (~ (fsm_output[33]));
      iCurDecState_1_sva <= (MUX_s_1_2_2({iCurDecState_1_sva , iCurDecState_sg1_sva},
          fsm_output[36])) & (~ (fsm_output[33]));
      iCurDecState_sg1_sva <= (MUX_s_1_2_2({iCurDecState_sg1_sva , iCurDecState_sg2_sva},
          fsm_output[36])) & (~ (fsm_output[33]));
      iCurDecState_sg2_sva <= (MUX_s_1_2_2({iCurDecState_sg2_sva , iCurDecState_sg3_sva},
          fsm_output[36])) & (~ (fsm_output[33]));
      iCurDecState_sg3_sva <= (MUX_s_1_2_2({iCurDecState_sg3_sva , iCurDecState_sg4_sva},
          fsm_output[36])) & (~ (fsm_output[33]));
      iCurDecState_sg4_sva <= (MUX_s_1_2_2({iCurDecState_sg4_sva , iCurDecState_sg5_1_sva},
          fsm_output[36])) & (~ (fsm_output[33]));
      MAIN_LOOP_cnt_1_sva_2 <= (MUX_v_5_2_2({(MAIN_LOOP_cnt_1_sva_1[4:0]) , MAIN_LOOP_cnt_1_sva_2},
          ~((fsm_output[24]) | (fsm_output[31])))) & (signext_5_1(~ (fsm_output[24])));
      i_8_sva <= (MUX_v_32_2_2({z_out_6 , i_8_sva}, and_dcpl_669)) & (signext_32_1(~
          (fsm_output[21])));
      unequal_tmp_2 <= MUX_s_1_2_2({(~((veciTablePuncPat_rsc_dualport_data_out[1])
          & (~((veciTablePuncPat_rsc_dualport_data_out[31]) | (veciTablePuncPat_rsc_dualport_data_out[30])
          | (veciTablePuncPat_rsc_dualport_data_out[29]) | (veciTablePuncPat_rsc_dualport_data_out[28])
          | (veciTablePuncPat_rsc_dualport_data_out[27]) | (veciTablePuncPat_rsc_dualport_data_out[26])
          | (veciTablePuncPat_rsc_dualport_data_out[25]) | (veciTablePuncPat_rsc_dualport_data_out[24])
          | (veciTablePuncPat_rsc_dualport_data_out[23]) | (veciTablePuncPat_rsc_dualport_data_out[22])
          | (veciTablePuncPat_rsc_dualport_data_out[21]) | (veciTablePuncPat_rsc_dualport_data_out[20])
          | (veciTablePuncPat_rsc_dualport_data_out[19]) | (veciTablePuncPat_rsc_dualport_data_out[18])
          | (veciTablePuncPat_rsc_dualport_data_out[17]) | (veciTablePuncPat_rsc_dualport_data_out[16])
          | (veciTablePuncPat_rsc_dualport_data_out[15]) | (veciTablePuncPat_rsc_dualport_data_out[14])
          | (veciTablePuncPat_rsc_dualport_data_out[13]) | (veciTablePuncPat_rsc_dualport_data_out[12])
          | (veciTablePuncPat_rsc_dualport_data_out[11]) | (veciTablePuncPat_rsc_dualport_data_out[10])
          | (veciTablePuncPat_rsc_dualport_data_out[9]) | (veciTablePuncPat_rsc_dualport_data_out[8])
          | (veciTablePuncPat_rsc_dualport_data_out[7]) | (veciTablePuncPat_rsc_dualport_data_out[6])
          | (veciTablePuncPat_rsc_dualport_data_out[5]) | (veciTablePuncPat_rsc_dualport_data_out[4])
          | (veciTablePuncPat_rsc_dualport_data_out[3]) | (veciTablePuncPat_rsc_dualport_data_out[2])
          | (veciTablePuncPat_rsc_dualport_data_out[0]))))) , unequal_tmp_2}, or_1832_cse);
      nor_dfs_1 <= MUX_s_1_2_2({nor_dfs_1 , nor_dfs_1_mx0w0}, fsm_output[22]);
      equal_tmp_1 <= MUX_s_1_2_2({equal_tmp_1 , equal_tmp_1_mx0w0}, fsm_output[22]);
      nor_tmp_4 <= MUX_s_1_2_2({nor_tmp_1_mx0w0 , nor_tmp_4}, or_1832_cse);
      iDistCnt_sva_2 <= MUX_v_32_2_2({((z_out_5[31:0]) + 32'b1) , iDistCnt_sva_2},
          or_1832_cse);
      MAIN_LOOP_slc_veciTablePuncPat_cse_sva <= MUX_v_32_2_2({MAIN_LOOP_slc_veciTablePuncPat_cse_sva
          , (veciTablePuncPat_rsc_dualport_data_out[31:0])}, fsm_output[22]);
      iDistCnt_sva_1 <= MUX_v_32_2_2({(z_out_5[31:0]) , iDistCnt_sva_1}, or_1832_cse);
      unequal_tmp_1 <= MUX_s_1_2_2({unequal_tmp_1 , (~((veciTablePuncPat_rsc_dualport_data_out[2])
          & (~((veciTablePuncPat_rsc_dualport_data_out[31]) | (veciTablePuncPat_rsc_dualport_data_out[30])
          | (veciTablePuncPat_rsc_dualport_data_out[29]) | (veciTablePuncPat_rsc_dualport_data_out[28])
          | (veciTablePuncPat_rsc_dualport_data_out[27]) | (veciTablePuncPat_rsc_dualport_data_out[26])
          | (veciTablePuncPat_rsc_dualport_data_out[25]) | (veciTablePuncPat_rsc_dualport_data_out[24])
          | (veciTablePuncPat_rsc_dualport_data_out[23]) | (veciTablePuncPat_rsc_dualport_data_out[22])
          | (veciTablePuncPat_rsc_dualport_data_out[21]) | (veciTablePuncPat_rsc_dualport_data_out[20])
          | (veciTablePuncPat_rsc_dualport_data_out[19]) | (veciTablePuncPat_rsc_dualport_data_out[18])
          | (veciTablePuncPat_rsc_dualport_data_out[17]) | (veciTablePuncPat_rsc_dualport_data_out[16])
          | (veciTablePuncPat_rsc_dualport_data_out[15]) | (veciTablePuncPat_rsc_dualport_data_out[14])
          | (veciTablePuncPat_rsc_dualport_data_out[13]) | (veciTablePuncPat_rsc_dualport_data_out[12])
          | (veciTablePuncPat_rsc_dualport_data_out[11]) | (veciTablePuncPat_rsc_dualport_data_out[10])
          | (veciTablePuncPat_rsc_dualport_data_out[9]) | (veciTablePuncPat_rsc_dualport_data_out[8])
          | (veciTablePuncPat_rsc_dualport_data_out[7]) | (veciTablePuncPat_rsc_dualport_data_out[6])
          | (veciTablePuncPat_rsc_dualport_data_out[5]) | (veciTablePuncPat_rsc_dualport_data_out[4])
          | (veciTablePuncPat_rsc_dualport_data_out[3]) | (veciTablePuncPat_rsc_dualport_data_out[1])
          | (veciTablePuncPat_rsc_dualport_data_out[0])))))}, fsm_output[22]);
      MAIN_LOOP_else_or_itm <= MUX_s_1_2_2({MAIN_LOOP_else_or_itm , (nor_dfs_1_mx0w0
          | equal_tmp_1_mx0w0)}, fsm_output[22]);
      iDistCnt_sva_4 <= MUX_v_32_2_2({z_out , iDistCnt_sva_4}, or_1863_cse);
      iDistCnt_sva_3 <= MUX_v_32_2_2({iDistCnt_sva_6 , iDistCnt_sva_3}, or_1863_cse);
      MAIN_LOOP_else_rIRxx11_acc_2_psp_sva <= MAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1;
      MAIN_LOOP_else_rIRxx01_acc_2_psp_sva <= MAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1;
      MAIN_LOOP_else_rIRxx10_acc_2_psp_sva <= MAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1;
      MAIN_LOOP_else_rIRxx00_acc_2_psp_sva <= MAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1;
      MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva <= mux_3_itm;
      MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva <= mux_1_itm;
      vecrMetricSet_0_1_lpi_1_dfm_2 <= MUX1HOT_v_10_5_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx00_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx00_acc_2_psp_sva}) , (conv_s2s_8_10(mux_1_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx00_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx00_acc_2_psp_sva))
          , vecrMetricSet_0_1_lpi_1_dfm_2}, {nor_218_cse , and_789_cse , and_790_cse
          , and_791_cse , or_1876_cse});
      vecrMetricSet_2_1_lpi_1_dfm_2 <= MUX1HOT_v_10_6_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx00_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx00_acc_2_psp_sva}) , ({{1{MAIN_LOOP_else_rIRxx10_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx10_acc_2_psp_sva}) , (conv_s2s_8_10(mux_1_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx10_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx00_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx10_acc_2_psp_sva))
          , vecrMetricSet_2_1_lpi_1_dfm_2}, {nor_218_cse , and_793_cse , and_794_cse
          , and_790_cse , and_791_cse , or_1876_cse});
      vecrMetricSet_4_1_lpi_1_dfm_2 <= MUX1HOT_v_10_6_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx10_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx10_acc_2_psp_sva}) , ({{1{MAIN_LOOP_else_rIRxx00_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx00_acc_2_psp_sva}) , (conv_s2s_8_10(mux_3_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx00_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx00_acc_2_psp_sva))
          , vecrMetricSet_4_1_lpi_1_dfm_2}, {nor_218_cse , and_793_cse , and_794_cse
          , and_790_cse , and_791_cse , or_1876_cse});
      vecrMetricSet_6_1_lpi_1_dfm_2 <= MUX1HOT_v_10_5_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow0_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx10_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx10_acc_2_psp_sva}) , (conv_s2s_8_10(mux_3_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx10_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx01_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx10_acc_2_psp_sva))
          , vecrMetricSet_6_1_lpi_1_dfm_2}, {nor_218_cse , and_789_cse , and_790_cse
          , and_791_cse , or_1876_cse});
      vecrMetricSet_9_1_lpi_1_dfm_2 <= MUX1HOT_v_10_5_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx01_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx01_acc_2_psp_sva}) , (conv_s2s_8_10(mux_1_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx01_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx01_acc_2_psp_sva))
          , vecrMetricSet_9_1_lpi_1_dfm_2}, {nor_218_cse , and_789_cse , and_790_cse
          , and_791_cse , or_1876_cse});
      vecrMetricSet_11_1_lpi_1_dfm_2 <= MUX1HOT_v_10_6_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx01_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx01_acc_2_psp_sva}) , ({{1{MAIN_LOOP_else_rIRxx11_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx11_acc_2_psp_sva}) , (conv_s2s_8_10(mux_1_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx11_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx10_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx11_acc_2_psp_sva))
          , vecrMetricSet_11_1_lpi_1_dfm_2}, {nor_218_cse , and_793_cse , and_794_cse
          , and_790_cse , and_791_cse , or_1876_cse});
      vecrMetricSet_13_1_lpi_1_dfm_2 <= MUX1HOT_v_10_6_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx11_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx11_acc_2_psp_sva}) , ({{1{MAIN_LOOP_else_rIRxx01_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx01_acc_2_psp_sva}) , (conv_s2s_8_10(mux_3_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx01_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx01_acc_2_psp_sva))
          , vecrMetricSet_13_1_lpi_1_dfm_2}, {nor_218_cse , and_793_cse , and_794_cse
          , and_790_cse , and_791_cse , or_1876_cse});
      vecrMetricSet_15_1_lpi_1_dfm_2 <= MUX1HOT_v_10_5_2({({{2{MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva[7]}},
          MAIN_LOOP_if_slc_vecNewDistance_rTow1_ncse_sva}) , ({{1{MAIN_LOOP_else_rIRxx11_acc_2_psp_sva[8]}},
          MAIN_LOOP_else_rIRxx11_acc_2_psp_sva}) , (conv_s2s_8_10(mux_3_itm) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx11_acc_2_psp_sva))
          , (conv_s2s_9_10(MAIN_LOOP_else_rIRxx11_acc_2_psp_sva_1) + conv_s2s_9_10(MAIN_LOOP_else_rIRxx11_acc_2_psp_sva))
          , vecrMetricSet_15_1_lpi_1_dfm_2}, {nor_218_cse , and_789_cse , and_790_cse
          , and_791_cse , or_1876_cse});
      MAIN_LOOP_cnt_1_sva_1 <= MUX_v_6_2_2({MAIN_LOOP_cnt_1_sva_1 , (conv_u2u_5_6(MAIN_LOOP_cnt_1_sva_2)
          + 6'b1)}, fsm_output[25]);
      BUTTERFLY_LOOP_rFiStAccMetricPrev1_slc_vecrMetricSet_1_cse_sva <= MUX1HOT_v_32_9_2({BUTTERFLY_LOOP_rFiStAccMetricPrev1_slc_vecrMetricSet_1_cse_sva
          , ({{22{vecrMetricSet_15_1_lpi_1_dfm_2[9]}}, vecrMetricSet_15_1_lpi_1_dfm_2})
          , ({{22{vecrMetricSet_13_1_lpi_1_dfm_2[9]}}, vecrMetricSet_13_1_lpi_1_dfm_2})
          , ({{22{vecrMetricSet_11_1_lpi_1_dfm_2[9]}}, vecrMetricSet_11_1_lpi_1_dfm_2})
          , ({{22{vecrMetricSet_9_1_lpi_1_dfm_2[9]}}, vecrMetricSet_9_1_lpi_1_dfm_2})
          , ({{22{vecrMetricSet_6_1_lpi_1_dfm_2[9]}}, vecrMetricSet_6_1_lpi_1_dfm_2})
          , ({{22{vecrMetricSet_4_1_lpi_1_dfm_2[9]}}, vecrMetricSet_4_1_lpi_1_dfm_2})
          , ({{22{vecrMetricSet_2_1_lpi_1_dfm_2[9]}}, vecrMetricSet_2_1_lpi_1_dfm_2})
          , ({{22{vecrMetricSet_0_1_lpi_1_dfm_2[9]}}, vecrMetricSet_0_1_lpi_1_dfm_2})},
          {(~ (fsm_output[25])) , ((~((MAIN_LOOP_b5_1_sva[3]) | (MAIN_LOOP_b5_1_sva[2])
          | (MAIN_LOOP_b5_1_sva[1]) | (MAIN_LOOP_b5_1_sva[0]))) & (fsm_output[25]))
          , ((MAIN_LOOP_b5_1_sva[1]) & (~((MAIN_LOOP_b5_1_sva[3]) | (MAIN_LOOP_b5_1_sva[2])
          | (MAIN_LOOP_b5_1_sva[0]))) & (fsm_output[25])) , ((MAIN_LOOP_b5_1_sva[2])
          & (~((MAIN_LOOP_b5_1_sva[3]) | (MAIN_LOOP_b5_1_sva[1]) | (MAIN_LOOP_b5_1_sva[0])))
          & (fsm_output[25])) , ((MAIN_LOOP_b5_1_sva[2]) & (MAIN_LOOP_b5_1_sva[1])
          & (~((MAIN_LOOP_b5_1_sva[3]) | (MAIN_LOOP_b5_1_sva[0]))) & (fsm_output[25]))
          , ((MAIN_LOOP_b5_1_sva[3]) & (MAIN_LOOP_b5_1_sva[0]) & (~((MAIN_LOOP_b5_1_sva[2])
          | (MAIN_LOOP_b5_1_sva[1]))) & (fsm_output[25])) , ((MAIN_LOOP_b5_1_sva[3])
          & (MAIN_LOOP_b5_1_sva[1]) & (MAIN_LOOP_b5_1_sva[0]) & (~ (MAIN_LOOP_b5_1_sva[2]))
          & (fsm_output[25])) , ((MAIN_LOOP_b5_1_sva[3]) & (MAIN_LOOP_b5_1_sva[2])
          & (MAIN_LOOP_b5_1_sva[0]) & (~ (MAIN_LOOP_b5_1_sva[1])) & (fsm_output[25]))
          , ((MAIN_LOOP_b5_1_sva[3]) & (MAIN_LOOP_b5_1_sva[2]) & (MAIN_LOOP_b5_1_sva[1])
          & (MAIN_LOOP_b5_1_sva[0]) & (fsm_output[25]))});
      BUTTERFLY_LOOP_rFiStAccMetricPrev0_slc_vecrMetricSet_1_cse_sva <= MUX_v_32_16_2({({{22{vecrMetricSet_0_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_0_1_lpi_1_dfm_2}) , 32'b0 , ({{22{vecrMetricSet_2_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_2_1_lpi_1_dfm_2}) , 32'b0 , ({{22{vecrMetricSet_4_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_4_1_lpi_1_dfm_2}) , 32'b0 , ({{22{vecrMetricSet_6_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_6_1_lpi_1_dfm_2}) , 32'b0 , 32'b0 , ({{22{vecrMetricSet_9_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_9_1_lpi_1_dfm_2}) , 32'b0 , ({{22{vecrMetricSet_11_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_11_1_lpi_1_dfm_2}) , 32'b0 , ({{22{vecrMetricSet_13_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_13_1_lpi_1_dfm_2}) , 32'b0 , ({{22{vecrMetricSet_15_1_lpi_1_dfm_2[9]}},
          vecrMetricSet_15_1_lpi_1_dfm_2})}, MAIN_LOOP_b5_1_sva);
      BUTTERFLY_LOOP_rFiStAccMetricPrev0_sva <= xBUTTERFLY_LOOP_rFiStAccMetricPrev0_sva[31:0];
      reg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse <= xreg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse[31:0];
      BUTTERFLY_LOOP_rSecStAccMetricPrev1_sva <= MUX_v_32_2_2({BUTTERFLY_LOOP_rSecStAccMetricPrev1_sva
          , ((MUX_v_32_2_2({(vecTrelMetric1_rsc_dualport_data_out[63:32]) , (vecTrelMetric2_rsc_dualport_data_out[31:0])},
          pOldTrelMetric_2_sva)) + BUTTERFLY_LOOP_rFiStAccMetricPrev0_slc_vecrMetricSet_1_cse_sva)},
          fsm_output[26]);
      MAIN_LOOP_and_12_itm <= (~ nor_tmp_4) & unequal_tmp_1;
      MAIN_LOOP_else_and_3_itm <= MAIN_LOOP_else_and_5_cse;
      MAIN_LOOP_else_and_4_itm <= MAIN_LOOP_else_and_6_cse;
      exit_UPDATE_MATRIX_LOOP_sva <= MUX_s_1_2_2({exit_UPDATE_MATRIX_LOOP_sva , (~
          (readslicef_34_1_33((conv_s2u_33_34({z_out_4 , 1'b1}) + conv_s2u_33_34({(~
          iNumOutBits_sva) , 1'b1})))))}, fsm_output[34]);
      UPDATE_MATRIX_LOOP_decCurBit_asn_6_itm <= iCurDecState_1_sva & (fsm_output[36]);
      UPDATE_MATRIX_LOOP_acc_5_itm <= xUPDATE_MATRIX_LOOP_acc_5_itm[12:0];
      retValue_mux_mut <= MUX1HOT_v_32_3_2({(vecTrelMetric1_rsc_dualport_data_out[31:0])
          , (vecTrelMetric2_rsc_dualport_data_out[31:0]) , retValue_mux_mut}, {and_dcpl_547
          , and_dcpl_548 , (~ (fsm_output[37]))});
      reg_if_acc_3_psp_sva_tmp_26 <= MUX_v_4_2_2({(if_acc_3_psp_sva[3:0]) , reg_if_acc_3_psp_sva_tmp_26},
          or_1535_cse);
      reg_iTailbitParamL0_lpi_dfm_sg1_tmp_30 <= MUX_s_1_2_2({(iTailbitParamL0_lpi_dfm_sg1[0])
          , reg_iTailbitParamL0_lpi_dfm_sg1_tmp_30}, or_1535_cse);
      reg_else_acc_3_psp_sva_tmp_26 <= MUX_v_4_2_2({(else_acc_3_psp_sva[3:0]) , reg_else_acc_3_psp_sva_tmp_26},
          or_1535_cse);
      reg_iTailbitParamL1_sg1_lpi_dfm_tmp_30 <= MUX_s_1_2_2({(iTailbitParamL1_sg1_lpi_dfm_mx0[0])
          , reg_iTailbitParamL1_sg1_lpi_dfm_tmp_30}, or_1535_cse);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp <= 8'b0;
      reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp_1 <= 8'b0;
      reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp <= 8'b0;
      reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp_1 <= 8'b0;
    end
    else begin
      reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp <= mux_itm;
      reg_vecNewDistance_rTow0_rsc_dualport_data_out_bfwt_tmp_1 <= mux_1_itm;
      reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp <= mux_2_itm;
      reg_vecNewDistance_rTow1_rsc_dualport_data_out_bfwt_tmp_1 <= mux_3_itm;
    end
  end
  assign xBUTTERFLY_LOOP_rFiStAccMetricPrev0_sva  = (MUX_v_32_2_2({(vecTrelMetric1_rsc_dualport_data_out[31:0])
      , (vecTrelMetric2_rsc_dualport_data_out[63:32])}, pOldTrelMetric_2_sva)) +
      BUTTERFLY_LOOP_rFiStAccMetricPrev0_slc_vecrMetricSet_1_cse_sva;
  assign xreg_BUTTERFLY_LOOP_rFiStAccMetricPrev1_sva_cse  = (MUX1HOT_v_32_3_2({(vecTrelMetric1_rsc_dualport_data_out[63:32])
      , (vecTrelMetric2_rsc_dualport_data_out[31:0]) , (vecTrelMetric1_rsc_dualport_data_out[31:0])},
      {(~(pOldTrelMetric_2_sva | (fsm_output[29]))) , ((pOldTrelMetric_2_sva & (~
      (fsm_output[29]))) | (pOldTrelMetric_2_sva & (fsm_output[29]))) , ((~ pOldTrelMetric_2_sva)
      & (fsm_output[29]))})) + BUTTERFLY_LOOP_rFiStAccMetricPrev1_slc_vecrMetricSet_1_cse_sva;
  assign xUPDATE_MATRIX_LOOP_acc_5_itm  = (iNumOutBits_sva[12:0]) + (~ (i_sva[12:0]));
  assign mux1h_215_nl = MUX1HOT_v_32_3_2({(signext_32_31(iNumOutBits_sva_mx0w0[31:1]))
      , i_1_sva , iDistCnt_sva_6}, {(fsm_output[1]) , (fsm_output[11]) , (fsm_output[23])});
  assign xz_out = (mux1h_215_nl) + conv_u2u_2_32({(fsm_output[1]) , 1'b1});
  assign z_out = xz_out[31:0];
  assign mux_192_nl = MUX_v_32_2_2({(~ iNewNumOutBitsPartA_1_sva) , (~ iNumOutBits_sva)},
      fsm_output[18]);
  assign xz_out_1 = conv_s2u_33_34({i_6_sva , 1'b1}) + conv_s2u_33_34({(mux_192_nl)
      , 1'b1});
  assign z_out_1 = xz_out_1[33:0];
  assign mux_195_nl = MUX_v_6_2_2({j_1_sva_2 , i_12_sva_2}, fsm_output[17]);
  assign xz_out_2 = conv_u2u_6_7(mux_195_nl) + 7'b1;
  assign z_out_2 = xz_out_2[6:0];
  assign mux1h_212_nl = MUX1HOT_v_32_4_2({i_2_sva , iPunctCounter_sva , iPunctCounter_sva_dfm_1
      , i_sva}, {(fsm_output[15]) , (fsm_output[18]) , (fsm_output[19]) , (fsm_output[34])});
  assign xz_out_4 = (mux1h_212_nl) + 32'b1;
  assign z_out_4 = xz_out_4[31:0];
  assign mux1h_213_nl = MUX1HOT_v_32_3_2({iDistCnt_sva , (~ iNumOutBits_sva) , ({(~
      acc_3_psp_sva) , (~ (iNumOutBits_sva[0]))})}, {(fsm_output[22]) , (fsm_output[33])
      , (fsm_output[21])});
  assign xz_out_5 = conv_s2u_32_33(mux1h_213_nl) + 33'b1;
  assign z_out_5 = xz_out_5[32:0];
  assign mux1h_214_nl = MUX1HOT_v_32_3_2({i_6_sva , iPunctCounter_sva_dfm_3 , i_8_sva},
      {(fsm_output[17]) , (fsm_output[19]) , (fsm_output[32])});
  assign xz_out_6 = (mux1h_214_nl) + 32'b1;
  assign z_out_6 = xz_out_6[31:0];
  assign mux_197_cse = MUX_s_1_2_2({(~ (for_acc_2_itm[33])) , exit_for_sva_1}, fsm_output[15]);

  function [4:0] MUX_v_5_2_2;
    input [9:0] inputs;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[9:5];
      end
      1'b1 : begin
        result = inputs[4:0];
      end
      default : begin
        result = inputs[9:5];
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [30:0] MUX1HOT_v_31_3_2;
    input [92:0] inputs;
    input [2:0] sel;
    reg [30:0] result;
    integer i;
  begin
    result = inputs[0+:31] & {31{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*31+:31] & {31{sel[i]}});
    MUX1HOT_v_31_3_2 = result;
  end
  endfunction


  function [30:0] MUX_v_31_2_2;
    input [61:0] inputs;
    input [0:0] sel;
    reg [30:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[61:31];
      end
      1'b1 : begin
        result = inputs[30:0];
      end
      default : begin
        result = inputs[61:31];
      end
    endcase
    MUX_v_31_2_2 = result;
  end
  endfunction


  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [31:0] signext_32_1;
    input [0:0] vector;
  begin
    signext_32_1= {{31{vector[0]}}, vector};
  end
  endfunction


  function [12:0] MUX_v_13_2_2;
    input [25:0] inputs;
    input [0:0] sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[25:13];
      end
      1'b1 : begin
        result = inputs[12:0];
      end
      default : begin
        result = inputs[25:13];
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function [31:0] MUX1HOT_v_32_3_2;
    input [95:0] inputs;
    input [2:0] sel;
    reg [31:0] result;
    integer i;
  begin
    result = inputs[0+:32] & {32{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*32+:32] & {32{sel[i]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function [3:0] MUX_v_4_2_2;
    input [7:0] inputs;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[7:4];
      end
      1'b1 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[7:4];
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [31:0] MUX1HOT_v_32_4_2;
    input [127:0] inputs;
    input [3:0] sel;
    reg [31:0] result;
    integer i;
  begin
    result = inputs[0+:32] & {32{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*32+:32] & {32{sel[i]}});
    MUX1HOT_v_32_4_2 = result;
  end
  endfunction


  function [3:0] MUX1HOT_v_4_3_2;
    input [11:0] inputs;
    input [2:0] sel;
    reg [3:0] result;
    integer i;
  begin
    result = inputs[0+:4] & {4{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*4+:4] & {4{sel[i]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function [12:0] MUX1HOT_v_13_3_2;
    input [38:0] inputs;
    input [2:0] sel;
    reg [12:0] result;
    integer i;
  begin
    result = inputs[0+:13] & {13{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*13+:13] & {13{sel[i]}});
    MUX1HOT_v_13_3_2 = result;
  end
  endfunction


  function [12:0] signext_13_1;
    input [0:0] vector;
  begin
    signext_13_1= {{12{vector[0]}}, vector};
  end
  endfunction


  function [0:0] MUX1HOT_s_1_3_2;
    input [2:0] inputs;
    input [2:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function [4:0] signext_5_1;
    input [0:0] vector;
  begin
    signext_5_1= {{4{vector[0]}}, vector};
  end
  endfunction


  function [31:0] MUX_v_32_2_2;
    input [63:0] inputs;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[63:32];
      end
      1'b1 : begin
        result = inputs[31:0];
      end
      default : begin
        result = inputs[63:32];
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function [6:0] MUX_v_7_2_2;
    input [13:0] inputs;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[13:7];
      end
      1'b1 : begin
        result = inputs[6:0];
      end
      default : begin
        result = inputs[13:7];
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [5:0] signext_6_1;
    input [0:0] vector;
  begin
    signext_6_1= {{5{vector[0]}}, vector};
  end
  endfunction


  function [3:0] MUX_v_4_16_2;
    input [63:0] inputs;
    input [3:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[63:60];
      end
      4'b0001 : begin
        result = inputs[59:56];
      end
      4'b0010 : begin
        result = inputs[55:52];
      end
      4'b0011 : begin
        result = inputs[51:48];
      end
      4'b0100 : begin
        result = inputs[47:44];
      end
      4'b0101 : begin
        result = inputs[43:40];
      end
      4'b0110 : begin
        result = inputs[39:36];
      end
      4'b0111 : begin
        result = inputs[35:32];
      end
      4'b1000 : begin
        result = inputs[31:28];
      end
      4'b1001 : begin
        result = inputs[27:24];
      end
      4'b1010 : begin
        result = inputs[23:20];
      end
      4'b1011 : begin
        result = inputs[19:16];
      end
      4'b1100 : begin
        result = inputs[15:12];
      end
      4'b1101 : begin
        result = inputs[11:8];
      end
      4'b1110 : begin
        result = inputs[7:4];
      end
      4'b1111 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[63:60];
      end
    endcase
    MUX_v_4_16_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_16_2;
    input [31:0] inputs;
    input [3:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[31:30];
      end
      4'b0001 : begin
        result = inputs[29:28];
      end
      4'b0010 : begin
        result = inputs[27:26];
      end
      4'b0011 : begin
        result = inputs[25:24];
      end
      4'b0100 : begin
        result = inputs[23:22];
      end
      4'b0101 : begin
        result = inputs[21:20];
      end
      4'b0110 : begin
        result = inputs[19:18];
      end
      4'b0111 : begin
        result = inputs[17:16];
      end
      4'b1000 : begin
        result = inputs[15:14];
      end
      4'b1001 : begin
        result = inputs[13:12];
      end
      4'b1010 : begin
        result = inputs[11:10];
      end
      4'b1011 : begin
        result = inputs[9:8];
      end
      4'b1100 : begin
        result = inputs[7:6];
      end
      4'b1101 : begin
        result = inputs[5:4];
      end
      4'b1110 : begin
        result = inputs[3:2];
      end
      4'b1111 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[31:30];
      end
    endcase
    MUX_v_2_16_2 = result;
  end
  endfunction


  function [31:0] MUX1HOT_v_32_5_2;
    input [159:0] inputs;
    input [4:0] sel;
    reg [31:0] result;
    integer i;
  begin
    result = inputs[0+:32] & {32{sel[0]}};
    for( i = 1; i < 5; i = i + 1 )
      result = result | (inputs[i*32+:32] & {32{sel[i]}});
    MUX1HOT_v_32_5_2 = result;
  end
  endfunction


  function [9:0] MUX1HOT_v_10_5_2;
    input [49:0] inputs;
    input [4:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 5; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_5_2 = result;
  end
  endfunction


  function [9:0] MUX1HOT_v_10_6_2;
    input [59:0] inputs;
    input [5:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 6; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_6_2 = result;
  end
  endfunction


  function [31:0] MUX1HOT_v_32_9_2;
    input [287:0] inputs;
    input [8:0] sel;
    reg [31:0] result;
    integer i;
  begin
    result = inputs[0+:32] & {32{sel[0]}};
    for( i = 1; i < 9; i = i + 1 )
      result = result | (inputs[i*32+:32] & {32{sel[i]}});
    MUX1HOT_v_32_9_2 = result;
  end
  endfunction


  function [31:0] MUX_v_32_16_2;
    input [511:0] inputs;
    input [3:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[511:480];
      end
      4'b0001 : begin
        result = inputs[479:448];
      end
      4'b0010 : begin
        result = inputs[447:416];
      end
      4'b0011 : begin
        result = inputs[415:384];
      end
      4'b0100 : begin
        result = inputs[383:352];
      end
      4'b0101 : begin
        result = inputs[351:320];
      end
      4'b0110 : begin
        result = inputs[319:288];
      end
      4'b0111 : begin
        result = inputs[287:256];
      end
      4'b1000 : begin
        result = inputs[255:224];
      end
      4'b1001 : begin
        result = inputs[223:192];
      end
      4'b1010 : begin
        result = inputs[191:160];
      end
      4'b1011 : begin
        result = inputs[159:128];
      end
      4'b1100 : begin
        result = inputs[127:96];
      end
      4'b1101 : begin
        result = inputs[95:64];
      end
      4'b1110 : begin
        result = inputs[63:32];
      end
      4'b1111 : begin
        result = inputs[31:0];
      end
      default : begin
        result = inputs[511:480];
      end
    endcase
    MUX_v_32_16_2 = result;
  end
  endfunction


  function [0:0] readslicef_34_1_33;
    input [33:0] vector;
    reg [33:0] tmp;
  begin
    tmp = vector >> 33;
    readslicef_34_1_33 = tmp[0:0];
  end
  endfunction


  function [31:0] signext_32_31;
    input [30:0] vector;
  begin
    signext_32_31= {{1{vector[30]}}, vector};
  end
  endfunction


  function  [4:0] conv_u2u_1_5 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_5 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [33:0] conv_s2u_33_34 ;
    input signed [32:0]  vector ;
  begin
    conv_s2u_33_34 = {vector[32], vector};
  end
  endfunction


  function signed [6:0] conv_u2s_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_7 = {1'b0, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2s_6_7 = {vector[5], vector};
  end
  endfunction


  function signed [8:0] conv_s2s_8_9 ;
    input signed [7:0]  vector ;
  begin
    conv_s2s_8_9 = {vector[7], vector};
  end
  endfunction


  function  [6:0] conv_u2u_3_7 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_7 = {{4{1'b0}}, vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function  [5:0] conv_u2u_12_6 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_6 = vector[5:0];
  end
  endfunction


  function  [5:0] conv_u2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_8_10 ;
    input signed [7:0]  vector ;
  begin
    conv_s2s_8_10 = {{2{vector[7]}}, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_9_10 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_10 = {vector[8], vector};
  end
  endfunction


  function  [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function  [31:0] conv_u2u_2_32 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_32 = {{30{1'b0}}, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [32:0] conv_s2u_32_33 ;
    input signed [31:0]  vector ;
  begin
    conv_s2u_32_33 = {vector[31], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InitDecode
//  Generated from file(s):
//    6) $PROJECT_HOME/src/ViterbiDecoder.cpp
//    3) $PROJECT_HOME/src/GlobalDefinitions.h
// ------------------------------------------------------------------


module InitDecode (
  start, ready, done, eNewCodingScheme_rsc_z, eNewChannelType_rsc_z, iN1_rsc_z, iN2_rsc_z,
      iNewNumOutBitsPartA_rsc_z, iNewNumOutBitsPartB_rsc_z, iPunctPatPartA_rsc_z,
      iPunctPatPartB_rsc_z, iLevel_rsc_z, InitDecode_return_rsc_z, eNewCodingScheme_triosy_lz,
      eNewChannelType_triosy_lz, iN1_triosy_lz, iN2_triosy_lz, iNewNumOutBitsPartA_triosy_lz,
      iNewNumOutBitsPartB_triosy_lz, iPunctPatPartA_triosy_lz, iPunctPatPartB_triosy_lz,
      iLevel_triosy_lz, vecNewDistance_rTow0_triosy_lz, vecNewDistance_rTow1_triosy_lz,
      vecOutputBits_triosy_lz, InitDecode_return_triosy_lz, clk, rst, vecNewDistance_rTow0_rsc_dualport_data_in,
      vecNewDistance_rTow0_rsc_dualport_addr, vecNewDistance_rTow0_rsc_dualport_re,
      vecNewDistance_rTow0_rsc_dualport_we, vecNewDistance_rTow0_rsc_dualport_data_out,
      vecNewDistance_rTow1_rsc_dualport_data_in, vecNewDistance_rTow1_rsc_dualport_addr,
      vecNewDistance_rTow1_rsc_dualport_re, vecNewDistance_rTow1_rsc_dualport_we,
      vecNewDistance_rTow1_rsc_dualport_data_out, vecOutputBits_rsc_dualport_data_in,
      vecOutputBits_rsc_dualport_addr, vecOutputBits_rsc_dualport_re, vecOutputBits_rsc_dualport_we,
      vecOutputBits_rsc_dualport_data_out
);
  input start;
  output ready;
  output done;
  input [31:0] eNewCodingScheme_rsc_z;
  input [31:0] eNewChannelType_rsc_z;
  input [31:0] iN1_rsc_z;
  input [31:0] iN2_rsc_z;
  input [31:0] iNewNumOutBitsPartA_rsc_z;
  input [31:0] iNewNumOutBitsPartB_rsc_z;
  input [31:0] iPunctPatPartA_rsc_z;
  input [31:0] iPunctPatPartB_rsc_z;
  input [31:0] iLevel_rsc_z;
  output [31:0] InitDecode_return_rsc_z;
  output eNewCodingScheme_triosy_lz;
  output eNewChannelType_triosy_lz;
  output iN1_triosy_lz;
  output iN2_triosy_lz;
  output iNewNumOutBitsPartA_triosy_lz;
  output iNewNumOutBitsPartB_triosy_lz;
  output iPunctPatPartA_triosy_lz;
  output iPunctPatPartB_triosy_lz;
  output iLevel_triosy_lz;
  output vecNewDistance_rTow0_triosy_lz;
  output vecNewDistance_rTow1_triosy_lz;
  output vecOutputBits_triosy_lz;
  output InitDecode_return_triosy_lz;
  input clk;
  input rst;
  output [15:0] vecNewDistance_rTow0_rsc_dualport_data_in;
  output [25:0] vecNewDistance_rTow0_rsc_dualport_addr;
  output [1:0] vecNewDistance_rTow0_rsc_dualport_re;
  output [1:0] vecNewDistance_rTow0_rsc_dualport_we;
  input [15:0] vecNewDistance_rTow0_rsc_dualport_data_out;
  output [15:0] vecNewDistance_rTow1_rsc_dualport_data_in;
  output [25:0] vecNewDistance_rTow1_rsc_dualport_addr;
  output [1:0] vecNewDistance_rTow1_rsc_dualport_re;
  output [1:0] vecNewDistance_rTow1_rsc_dualport_we;
  input [15:0] vecNewDistance_rTow1_rsc_dualport_data_out;
  output [15:0] vecOutputBits_rsc_dualport_data_in;
  output [25:0] vecOutputBits_rsc_dualport_addr;
  output [1:0] vecOutputBits_rsc_dualport_re;
  output [1:0] vecOutputBits_rsc_dualport_we;
  input [15:0] vecOutputBits_rsc_dualport_data_out;


  // Interconnect Declarations
  wire core_wen;
  wire [25:0] vecNewDistance_rTow0_rsc_dualport_addr_core;
  wire [1:0] vecNewDistance_rTow0_rsc_dualport_re_core_sct;
  wire [25:0] vecNewDistance_rTow1_rsc_dualport_addr_core;
  wire [1:0] vecNewDistance_rTow1_rsc_dualport_re_core_sct;
  wire [15:0] vecOutputBits_rsc_dualport_data_in_core;
  wire [25:0] vecOutputBits_rsc_dualport_addr_core;
  wire [1:0] vecOutputBits_rsc_dualport_we_core_sct;
  wire [31:0] eNewCodingScheme_rsc_mgc_in_wire_d;
  wire [31:0] eNewChannelType_rsc_mgc_in_wire_d;
  wire [31:0] iN1_rsc_mgc_in_wire_d;
  wire [31:0] iN2_rsc_mgc_in_wire_d;
  wire [31:0] iNewNumOutBitsPartA_rsc_mgc_in_wire_d;
  wire [31:0] iNewNumOutBitsPartB_rsc_mgc_in_wire_d;
  wire [31:0] iPunctPatPartA_rsc_mgc_in_wire_d;
  wire [31:0] iPunctPatPartB_rsc_mgc_in_wire_d;
  wire [31:0] iLevel_rsc_mgc_in_wire_d;
  wire [31:0] InitDecode_return_rsc_mgc_out_stdreg_d;
  wire [63:0] vecTrelMetric1_rsc_dualport_data_in;
  wire [11:0] vecTrelMetric1_rsc_dualport_addr;
  wire [1:0] vecTrelMetric1_rsc_dualport_re;
  wire [1:0] vecTrelMetric1_rsc_dualport_we;
  wire [63:0] vecTrelMetric1_rsc_dualport_data_out;
  wire [63:0] vecTrelMetric2_rsc_dualport_data_in;
  wire [11:0] vecTrelMetric2_rsc_dualport_addr;
  wire [1:0] vecTrelMetric2_rsc_dualport_re;
  wire [1:0] vecTrelMetric2_rsc_dualport_we;
  wire [63:0] vecTrelMetric2_rsc_dualport_data_out;
  wire [63:0] veciTablePuncPat_rsc_dualport_data_in;
  wire [25:0] veciTablePuncPat_rsc_dualport_addr;
  wire [1:0] veciTablePuncPat_rsc_dualport_re;
  wire [1:0] veciTablePuncPat_rsc_dualport_we;
  wire [63:0] veciTablePuncPat_rsc_dualport_data_out;
  wire [1:0] matdecDecisions_rsc_dualport_data_in;
  wire [37:0] matdecDecisions_rsc_dualport_addr;
  wire [1:0] matdecDecisions_rsc_dualport_re;
  wire [1:0] matdecDecisions_rsc_dualport_we;
  wire [1:0] matdecDecisions_rsc_dualport_data_out;
  wire mgc_start_sync_mgc_bsync_rv_rd_core_sct;
  wire mgc_start_sync_mgc_bsync_rv_vd;
  wire mgc_done_sync_mgc_bsync_rdy_rd_core_sct;
  wire InitDecode_return_triosy_mgc_io_sync_ld_core_sct;
  wire vecOutputBits_triosy_mgc_io_sync_ld_core_sct;
  wire vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct;
  wire vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct;
  wire iLevel_triosy_mgc_io_sync_ld_core_sct;
  wire iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct;
  wire iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct;
  wire iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct;
  wire iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct;
  wire iN2_triosy_mgc_io_sync_ld_core_sct;
  wire iN1_triosy_mgc_io_sync_ld_core_sct;
  wire eNewChannelType_triosy_mgc_io_sync_ld_core_sct;
  wire eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct;
  wire [31:0] div_mgc_div_a;
  wire [31:0] div_mgc_div_b;
  wire [31:0] div_mgc_div_z;
  reg [31:0] div_mgc_div_z_oreg;
  wire [31:0] div_mgc_div_1_a;
  wire [3:0] div_mgc_div_1_b;
  wire [31:0] div_mgc_div_1_z;
  reg [31:0] div_mgc_div_1_z_oreg;

  mgc_in_wire #(.rscid(4),
  .width(32)) eNewCodingScheme_rsc_mgc_in_wire (
      .d(eNewCodingScheme_rsc_mgc_in_wire_d),
      .z(eNewCodingScheme_rsc_z)
    );
  mgc_in_wire #(.rscid(5),
  .width(32)) eNewChannelType_rsc_mgc_in_wire (
      .d(eNewChannelType_rsc_mgc_in_wire_d),
      .z(eNewChannelType_rsc_z)
    );
  mgc_in_wire #(.rscid(6),
  .width(32)) iN1_rsc_mgc_in_wire (
      .d(iN1_rsc_mgc_in_wire_d),
      .z(iN1_rsc_z)
    );
  mgc_in_wire #(.rscid(7),
  .width(32)) iN2_rsc_mgc_in_wire (
      .d(iN2_rsc_mgc_in_wire_d),
      .z(iN2_rsc_z)
    );
  mgc_in_wire #(.rscid(8),
  .width(32)) iNewNumOutBitsPartA_rsc_mgc_in_wire (
      .d(iNewNumOutBitsPartA_rsc_mgc_in_wire_d),
      .z(iNewNumOutBitsPartA_rsc_z)
    );
  mgc_in_wire #(.rscid(9),
  .width(32)) iNewNumOutBitsPartB_rsc_mgc_in_wire (
      .d(iNewNumOutBitsPartB_rsc_mgc_in_wire_d),
      .z(iNewNumOutBitsPartB_rsc_z)
    );
  mgc_in_wire #(.rscid(10),
  .width(32)) iPunctPatPartA_rsc_mgc_in_wire (
      .d(iPunctPatPartA_rsc_mgc_in_wire_d),
      .z(iPunctPatPartA_rsc_z)
    );
  mgc_in_wire #(.rscid(11),
  .width(32)) iPunctPatPartB_rsc_mgc_in_wire (
      .d(iPunctPatPartB_rsc_mgc_in_wire_d),
      .z(iPunctPatPartB_rsc_z)
    );
  mgc_in_wire #(.rscid(12),
  .width(32)) iLevel_rsc_mgc_in_wire (
      .d(iLevel_rsc_mgc_in_wire_d),
      .z(iLevel_rsc_z)
    );
  mgc_out_stdreg #(.rscid(13),
  .width(32)) InitDecode_return_rsc_mgc_out_stdreg (
      .d(InitDecode_return_rsc_mgc_out_stdreg_d),
      .z(InitDecode_return_rsc_z)
    );
  dualport_ram_be #(.ram_id(14),
  .words(64),
  .width(32),
  .addr_width(6),
  .a_reset_active(0),
  .s_reset_active(1),
  .enable_active(0),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_dualport_readwrite_port(2)) vecTrelMetric1_rsc_dualport (
      .data_in(({32'b0 , (vecTrelMetric1_rsc_dualport_data_in[31:0])})),
      .addr(vecTrelMetric1_rsc_dualport_addr),
      .re(vecTrelMetric1_rsc_dualport_re),
      .we(vecTrelMetric1_rsc_dualport_we),
      .data_out(vecTrelMetric1_rsc_dualport_data_out),
      .clk(clk),
      .s_rst(rst),
      .a_rst(1'b1),
      .en((~ core_wen))
    );
  dualport_ram_be #(.ram_id(15),
  .words(64),
  .width(32),
  .addr_width(6),
  .a_reset_active(0),
  .s_reset_active(1),
  .enable_active(0),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_dualport_readwrite_port(2)) vecTrelMetric2_rsc_dualport (
      .data_in(({32'b0 , (vecTrelMetric2_rsc_dualport_data_in[31:0])})),
      .addr(vecTrelMetric2_rsc_dualport_addr),
      .re(vecTrelMetric2_rsc_dualport_re),
      .we(vecTrelMetric2_rsc_dualport_we),
      .data_out(vecTrelMetric2_rsc_dualport_data_out),
      .clk(clk),
      .s_rst(rst),
      .a_rst(1'b1),
      .en((~ core_wen))
    );
  dualport_ram_be #(.ram_id(17),
  .words(4800),
  .width(32),
  .addr_width(13),
  .a_reset_active(0),
  .s_reset_active(1),
  .enable_active(0),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_dualport_readwrite_port(2)) veciTablePuncPat_rsc_dualport (
      .data_in(({32'b0 , (veciTablePuncPat_rsc_dualport_data_in[31:0])})),
      .addr(({13'b0 , (veciTablePuncPat_rsc_dualport_addr[12:0])})),
      .re(veciTablePuncPat_rsc_dualport_re),
      .we(veciTablePuncPat_rsc_dualport_we),
      .data_out(veciTablePuncPat_rsc_dualport_data_out),
      .clk(clk),
      .s_rst(rst),
      .a_rst(1'b1),
      .en((~ core_wen))
    );
  dualport_ram_be #(.ram_id(19),
  .words(307200),
  .width(1),
  .addr_width(19),
  .a_reset_active(0),
  .s_reset_active(1),
  .enable_active(0),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_dualport_readwrite_port(2)) matdecDecisions_rsc_dualport (
      .data_in(({1'b0 , (matdecDecisions_rsc_dualport_data_in[0])})),
      .addr(({19'b0 , (matdecDecisions_rsc_dualport_addr[18:0])})),
      .re(matdecDecisions_rsc_dualport_re),
      .we(matdecDecisions_rsc_dualport_we),
      .data_out(matdecDecisions_rsc_dualport_data_out),
      .clk(clk),
      .s_rst(rst),
      .a_rst(1'b1),
      .en((~ core_wen))
    );
  mgc_bsync_rv #(.rscid(26),
  .ready(1),
  .valid(1)) mgc_start_sync_mgc_bsync_rv (
      .rd(mgc_start_sync_mgc_bsync_rv_rd_core_sct),
      .vd(mgc_start_sync_mgc_bsync_rv_vd),
      .rz(ready),
      .vz(start)
    );
  mgc_bsync_rdy #(.rscid(27),
  .ready(1),
  .valid(0)) mgc_done_sync_mgc_bsync_rdy (
      .rd(mgc_done_sync_mgc_bsync_rdy_rd_core_sct),
      .rz(done)
    );
  mgc_io_sync  InitDecode_return_triosy_mgc_io_sync (
      .ld(InitDecode_return_triosy_mgc_io_sync_ld_core_sct),
      .lz(InitDecode_return_triosy_lz)
    );
  mgc_io_sync  vecOutputBits_triosy_mgc_io_sync (
      .ld(vecOutputBits_triosy_mgc_io_sync_ld_core_sct),
      .lz(vecOutputBits_triosy_lz)
    );
  mgc_io_sync  vecNewDistance_rTow1_triosy_mgc_io_sync (
      .ld(vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct),
      .lz(vecNewDistance_rTow1_triosy_lz)
    );
  mgc_io_sync  vecNewDistance_rTow0_triosy_mgc_io_sync (
      .ld(vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct),
      .lz(vecNewDistance_rTow0_triosy_lz)
    );
  mgc_io_sync  iLevel_triosy_mgc_io_sync (
      .ld(iLevel_triosy_mgc_io_sync_ld_core_sct),
      .lz(iLevel_triosy_lz)
    );
  mgc_io_sync  iPunctPatPartB_triosy_mgc_io_sync (
      .ld(iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct),
      .lz(iPunctPatPartB_triosy_lz)
    );
  mgc_io_sync  iPunctPatPartA_triosy_mgc_io_sync (
      .ld(iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct),
      .lz(iPunctPatPartA_triosy_lz)
    );
  mgc_io_sync  iNewNumOutBitsPartB_triosy_mgc_io_sync (
      .ld(iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct),
      .lz(iNewNumOutBitsPartB_triosy_lz)
    );
  mgc_io_sync  iNewNumOutBitsPartA_triosy_mgc_io_sync (
      .ld(iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct),
      .lz(iNewNumOutBitsPartA_triosy_lz)
    );
  mgc_io_sync  iN2_triosy_mgc_io_sync (
      .ld(iN2_triosy_mgc_io_sync_ld_core_sct),
      .lz(iN2_triosy_lz)
    );
  mgc_io_sync  iN1_triosy_mgc_io_sync (
      .ld(iN1_triosy_mgc_io_sync_ld_core_sct),
      .lz(iN1_triosy_lz)
    );
  mgc_io_sync  eNewChannelType_triosy_mgc_io_sync (
      .ld(eNewChannelType_triosy_mgc_io_sync_ld_core_sct),
      .lz(eNewChannelType_triosy_lz)
    );
  mgc_io_sync  eNewCodingScheme_triosy_mgc_io_sync (
      .ld(eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct),
      .lz(eNewCodingScheme_triosy_lz)
    );
  mgc_div #(.width_a(32),
  .width_b(32),
  .signd(1)) div_mgc_div (
      .a(div_mgc_div_a),
      .b(div_mgc_div_b),
      .z(div_mgc_div_z)
    );
  mgc_div #(.width_a(32),
  .width_b(4),
  .signd(0)) div_mgc_div_1 (
      .a(div_mgc_div_1_a),
      .b(div_mgc_div_1_b),
      .z(div_mgc_div_1_z)
    );
  InitDecode_core InitDecode_core_inst (
      .clk(clk),
      .rst(rst),
      .vecNewDistance_rTow0_rsc_dualport_data_out(vecNewDistance_rTow0_rsc_dualport_data_out),
      .vecNewDistance_rTow1_rsc_dualport_data_out(vecNewDistance_rTow1_rsc_dualport_data_out),
      .core_wen(core_wen),
      .vecNewDistance_rTow0_rsc_dualport_addr_core(vecNewDistance_rTow0_rsc_dualport_addr_core),
      .vecNewDistance_rTow0_rsc_dualport_re_core_sct(vecNewDistance_rTow0_rsc_dualport_re_core_sct),
      .vecNewDistance_rTow1_rsc_dualport_addr_core(vecNewDistance_rTow1_rsc_dualport_addr_core),
      .vecNewDistance_rTow1_rsc_dualport_re_core_sct(vecNewDistance_rTow1_rsc_dualport_re_core_sct),
      .vecOutputBits_rsc_dualport_data_in_core(vecOutputBits_rsc_dualport_data_in_core),
      .vecOutputBits_rsc_dualport_addr_core(vecOutputBits_rsc_dualport_addr_core),
      .vecOutputBits_rsc_dualport_we_core_sct(vecOutputBits_rsc_dualport_we_core_sct),
      .eNewCodingScheme_rsc_mgc_in_wire_d(eNewCodingScheme_rsc_mgc_in_wire_d),
      .eNewChannelType_rsc_mgc_in_wire_d(eNewChannelType_rsc_mgc_in_wire_d),
      .iN1_rsc_mgc_in_wire_d(iN1_rsc_mgc_in_wire_d),
      .iN2_rsc_mgc_in_wire_d(iN2_rsc_mgc_in_wire_d),
      .iNewNumOutBitsPartA_rsc_mgc_in_wire_d(iNewNumOutBitsPartA_rsc_mgc_in_wire_d),
      .iNewNumOutBitsPartB_rsc_mgc_in_wire_d(iNewNumOutBitsPartB_rsc_mgc_in_wire_d),
      .iPunctPatPartA_rsc_mgc_in_wire_d(iPunctPatPartA_rsc_mgc_in_wire_d),
      .iPunctPatPartB_rsc_mgc_in_wire_d(iPunctPatPartB_rsc_mgc_in_wire_d),
      .iLevel_rsc_mgc_in_wire_d(iLevel_rsc_mgc_in_wire_d),
      .InitDecode_return_rsc_mgc_out_stdreg_d(InitDecode_return_rsc_mgc_out_stdreg_d),
      .vecTrelMetric1_rsc_dualport_data_in(vecTrelMetric1_rsc_dualport_data_in),
      .vecTrelMetric1_rsc_dualport_addr(vecTrelMetric1_rsc_dualport_addr),
      .vecTrelMetric1_rsc_dualport_re(vecTrelMetric1_rsc_dualport_re),
      .vecTrelMetric1_rsc_dualport_we(vecTrelMetric1_rsc_dualport_we),
      .vecTrelMetric1_rsc_dualport_data_out(vecTrelMetric1_rsc_dualport_data_out),
      .vecTrelMetric2_rsc_dualport_data_in(vecTrelMetric2_rsc_dualport_data_in),
      .vecTrelMetric2_rsc_dualport_addr(vecTrelMetric2_rsc_dualport_addr),
      .vecTrelMetric2_rsc_dualport_re(vecTrelMetric2_rsc_dualport_re),
      .vecTrelMetric2_rsc_dualport_we(vecTrelMetric2_rsc_dualport_we),
      .vecTrelMetric2_rsc_dualport_data_out(vecTrelMetric2_rsc_dualport_data_out),
      .veciTablePuncPat_rsc_dualport_data_in(veciTablePuncPat_rsc_dualport_data_in),
      .veciTablePuncPat_rsc_dualport_addr(veciTablePuncPat_rsc_dualport_addr),
      .veciTablePuncPat_rsc_dualport_re(veciTablePuncPat_rsc_dualport_re),
      .veciTablePuncPat_rsc_dualport_we(veciTablePuncPat_rsc_dualport_we),
      .veciTablePuncPat_rsc_dualport_data_out(veciTablePuncPat_rsc_dualport_data_out),
      .matdecDecisions_rsc_dualport_data_in(matdecDecisions_rsc_dualport_data_in),
      .matdecDecisions_rsc_dualport_addr(matdecDecisions_rsc_dualport_addr),
      .matdecDecisions_rsc_dualport_re(matdecDecisions_rsc_dualport_re),
      .matdecDecisions_rsc_dualport_we(matdecDecisions_rsc_dualport_we),
      .matdecDecisions_rsc_dualport_data_out(matdecDecisions_rsc_dualport_data_out),
      .mgc_start_sync_mgc_bsync_rv_rd_core_sct(mgc_start_sync_mgc_bsync_rv_rd_core_sct),
      .mgc_start_sync_mgc_bsync_rv_vd(mgc_start_sync_mgc_bsync_rv_vd),
      .mgc_done_sync_mgc_bsync_rdy_rd_core_sct(mgc_done_sync_mgc_bsync_rdy_rd_core_sct),
      .InitDecode_return_triosy_mgc_io_sync_ld_core_sct(InitDecode_return_triosy_mgc_io_sync_ld_core_sct),
      .vecOutputBits_triosy_mgc_io_sync_ld_core_sct(vecOutputBits_triosy_mgc_io_sync_ld_core_sct),
      .vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct(vecNewDistance_rTow1_triosy_mgc_io_sync_ld_core_sct),
      .vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct(vecNewDistance_rTow0_triosy_mgc_io_sync_ld_core_sct),
      .iLevel_triosy_mgc_io_sync_ld_core_sct(iLevel_triosy_mgc_io_sync_ld_core_sct),
      .iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct(iPunctPatPartB_triosy_mgc_io_sync_ld_core_sct),
      .iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct(iPunctPatPartA_triosy_mgc_io_sync_ld_core_sct),
      .iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct(iNewNumOutBitsPartB_triosy_mgc_io_sync_ld_core_sct),
      .iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct(iNewNumOutBitsPartA_triosy_mgc_io_sync_ld_core_sct),
      .iN2_triosy_mgc_io_sync_ld_core_sct(iN2_triosy_mgc_io_sync_ld_core_sct),
      .iN1_triosy_mgc_io_sync_ld_core_sct(iN1_triosy_mgc_io_sync_ld_core_sct),
      .eNewChannelType_triosy_mgc_io_sync_ld_core_sct(eNewChannelType_triosy_mgc_io_sync_ld_core_sct),
      .eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct(eNewCodingScheme_triosy_mgc_io_sync_ld_core_sct),
      .div_mgc_div_a(div_mgc_div_a),
      .div_mgc_div_b(div_mgc_div_b),
      .div_mgc_div_z_oreg(div_mgc_div_z_oreg),
      .div_mgc_div_1_a(div_mgc_div_1_a),
      .div_mgc_div_1_b(div_mgc_div_1_b),
      .div_mgc_div_1_z_oreg(div_mgc_div_1_z_oreg)
    );
  assign vecNewDistance_rTow0_rsc_dualport_data_in = 16'b0;
  assign vecNewDistance_rTow0_rsc_dualport_addr = vecNewDistance_rTow0_rsc_dualport_addr_core;
  assign vecNewDistance_rTow0_rsc_dualport_re = ~ vecNewDistance_rTow0_rsc_dualport_re_core_sct;
  assign vecNewDistance_rTow0_rsc_dualport_we = 2'b11;
  assign vecNewDistance_rTow1_rsc_dualport_data_in = 16'b0;
  assign vecNewDistance_rTow1_rsc_dualport_addr = vecNewDistance_rTow1_rsc_dualport_addr_core;
  assign vecNewDistance_rTow1_rsc_dualport_re = ~ vecNewDistance_rTow1_rsc_dualport_re_core_sct;
  assign vecNewDistance_rTow1_rsc_dualport_we = 2'b11;
  assign vecOutputBits_rsc_dualport_data_in = {8'b0 , (vecOutputBits_rsc_dualport_data_in_core[7:0])};
  assign vecOutputBits_rsc_dualport_addr = {13'b0 , (vecOutputBits_rsc_dualport_addr_core[12:0])};
  assign vecOutputBits_rsc_dualport_re = 2'b11;
  assign vecOutputBits_rsc_dualport_we = ~ vecOutputBits_rsc_dualport_we_core_sct;
  always @(posedge clk) begin
    if ( rst ) begin
      div_mgc_div_z_oreg <= 32'b0;
      div_mgc_div_1_z_oreg <= 32'b0;
    end
    else if ( core_wen ) begin
      div_mgc_div_z_oreg <= div_mgc_div_z;
      div_mgc_div_1_z_oreg <= div_mgc_div_1_z;
    end
  end
endmodule



