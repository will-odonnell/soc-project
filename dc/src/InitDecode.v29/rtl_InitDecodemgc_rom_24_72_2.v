// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.50 Production Release
//  HLS Date:       Sun Jul  3 15:07:11 PDT 2011
// 
//  Generated by:   wodonnell@soc1
//  Generated date: Tue Dec  3 22:46:25 2013
// ----------------------------------------------------------------------

// 
module InitDecodemgc_rom_24_72_2 (addr, data_out
);
  input [6:0]addr ;
  output [1:0]data_out ;

  parameter rom_id = 24;
  parameter size = 72;
  parameter width = 2;

  reg [2-1:0] mem [72-1:0];
  // pragma attribute mem MEM_INIT_BLOCK rom_init_blk
  always@(addr) begin: rom_init_blk
    mem[0] = 2'b11;
    mem[1] = 2'b11;
    mem[2] = 2'b11;
    mem[3] = 2'b11;
    mem[4] = 2'b11;
    mem[5] = 2'b11;
    mem[6] = 2'b10;
    mem[7] = 2'b11;
    mem[8] = 2'b11;
    mem[9] = 2'b11;
    mem[10] = 2'b11;
    mem[11] = 2'b11;
    mem[12] = 2'b10;
    mem[13] = 2'b11;
    mem[14] = 2'b11;
    mem[15] = 2'b10;
    mem[16] = 2'b11;
    mem[17] = 2'b11;
    mem[18] = 2'b10;
    mem[19] = 2'b10;
    mem[20] = 2'b11;
    mem[21] = 2'b10;
    mem[22] = 2'b11;
    mem[23] = 2'b11;
    mem[24] = 2'b10;
    mem[25] = 2'b10;
    mem[26] = 2'b11;
    mem[27] = 2'b10;
    mem[28] = 2'b10;
    mem[29] = 2'b11;
    mem[30] = 2'b10;
    mem[31] = 2'b10;
    mem[32] = 2'b10;
    mem[33] = 2'b10;
    mem[34] = 2'b10;
    mem[35] = 2'b11;
    mem[36] = 2'b10;
    mem[37] = 2'b10;
    mem[38] = 2'b10;
    mem[39] = 2'b10;
    mem[40] = 2'b10;
    mem[41] = 2'b10;
    mem[42] = 2'b01;
    mem[43] = 2'b10;
    mem[44] = 2'b10;
    mem[45] = 2'b10;
    mem[46] = 2'b10;
    mem[47] = 2'b10;
    mem[48] = 2'b01;
    mem[49] = 2'b10;
    mem[50] = 2'b10;
    mem[51] = 2'b01;
    mem[52] = 2'b10;
    mem[53] = 2'b10;
    mem[54] = 2'b01;
    mem[55] = 2'b01;
    mem[56] = 2'b10;
    mem[57] = 2'b01;
    mem[58] = 2'b10;
    mem[59] = 2'b10;
    mem[60] = 2'b01;
    mem[61] = 2'b01;
    mem[62] = 2'b10;
    mem[63] = 2'b01;
    mem[64] = 2'b10;
    mem[65] = 2'b01;
    mem[66] = 2'b01;
    mem[67] = 2'b01;
    mem[68] = 2'b01;
    mem[69] = 2'b01;
    mem[70] = 2'b10;
    mem[71] = 2'b01;
  end

  reg [2-1:0] data_out_t;
  reg [6:0] addr_mx;
  always@(addr)
  begin
    if (addr >= 0 && addr < 72)
      addr_mx = addr;
    else
      addr_mx = {1'b0, addr[5:0]};
    data_out_t = mem[addr_mx];
  end
  assign data_out = data_out_t;

endmodule


